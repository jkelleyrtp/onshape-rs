/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PartsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PartsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PartsApiClient<C> {
        PartsApiClient {
            configuration,
        }
    }
}

pub trait PartsApi {
    fn get_parts_wmv(&self, did: &str, wvm: &str, wvmid: &str, element_id: Option<&str>, with_thumbnails: Option<bool>, include_property_defaults: Option<bool>, link_document_id: Option<&str>, configuration: Option<&str>) -> Box<dyn Future<Item = Vec<crate::models::BtPartMetadataInfo>, Error = Error<serde_json::Value>>>;
    fn get_parts_wmve(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, with_thumbnails: Option<bool>, include_property_defaults: Option<bool>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = Vec<crate::models::BtPartMetadataInfo>, Error = Error<serde_json::Value>>>;
    fn update_parts_wmv(&self, did: &str, wvm: &str, wvmid: &str, edit_description: Option<&str>, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PartsApi for PartsApiClient<C> {
    fn get_parts_wmv(&self, did: &str, wvm: &str, wvmid: &str, element_id: Option<&str>, with_thumbnails: Option<bool>, include_property_defaults: Option<bool>, link_document_id: Option<&str>, configuration: Option<&str>) -> Box<dyn Future<Item = Vec<crate::models::BtPartMetadataInfo>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/parts/d/{did}/{wvm}/{wvmid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = element_id {
            req = req.with_query_param("elementId".to_string(), s.to_string());
        }
        if let Some(ref s) = with_thumbnails {
            req = req.with_query_param("withThumbnails".to_string(), s.to_string());
        }
        if let Some(ref s) = include_property_defaults {
            req = req.with_query_param("includePropertyDefaults".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_parts_wmve(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, with_thumbnails: Option<bool>, include_property_defaults: Option<bool>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = Vec<crate::models::BtPartMetadataInfo>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = with_thumbnails {
            req = req.with_query_param("withThumbnails".to_string(), s.to_string());
        }
        if let Some(ref s) = include_property_defaults {
            req = req.with_query_param("includePropertyDefaults".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn update_parts_wmv(&self, did: &str, wvm: &str, wvmid: &str, edit_description: Option<&str>, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/parts/d/{did}/{wvm}/{wvmid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = edit_description {
            req = req.with_query_param("editDescription".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
