/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtmSketchConstraint {
    #[serde(rename = "drivenDimension", skip_serializing_if = "Option::is_none")]
    pub driven_dimension: Option<bool>,
    #[serde(rename = "constraintType", skip_serializing_if = "Option::is_none")]
    pub constraint_type: Option<ConstraintType>,
    #[serde(rename = "hasOffsetData1", skip_serializing_if = "Option::is_none")]
    pub has_offset_data1: Option<bool>,
    #[serde(rename = "offsetOrientation1", skip_serializing_if = "Option::is_none")]
    pub offset_orientation1: Option<bool>,
    #[serde(rename = "offsetDistance1", skip_serializing_if = "Option::is_none")]
    pub offset_distance1: Option<f64>,
    #[serde(rename = "hasOffsetData2", skip_serializing_if = "Option::is_none")]
    pub has_offset_data2: Option<bool>,
    #[serde(rename = "offsetOrientation2", skip_serializing_if = "Option::is_none")]
    pub offset_orientation2: Option<bool>,
    #[serde(rename = "offsetDistance2", skip_serializing_if = "Option::is_none")]
    pub offset_distance2: Option<f64>,
    #[serde(rename = "hasPierceParameter", skip_serializing_if = "Option::is_none")]
    pub has_pierce_parameter: Option<bool>,
    #[serde(rename = "pierceParameter", skip_serializing_if = "Option::is_none")]
    pub pierce_parameter: Option<f64>,
    #[serde(rename = "helpParameters", skip_serializing_if = "Option::is_none")]
    pub help_parameters: Option<Vec<f64>>,
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<crate::models::BtmParameter>>,
    #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
    pub import_microversion: Option<String>,
    #[serde(rename = "entityId", skip_serializing_if = "Option::is_none")]
    pub entity_id: Option<String>,
}

impl BtmSketchConstraint {
    pub fn new() -> BtmSketchConstraint {
        BtmSketchConstraint {
            driven_dimension: None,
            constraint_type: None,
            has_offset_data1: None,
            offset_orientation1: None,
            offset_distance1: None,
            has_offset_data2: None,
            offset_orientation2: None,
            offset_distance2: None,
            has_pierce_parameter: None,
            pierce_parameter: None,
            help_parameters: None,
            parameters: None,
            node_id: None,
            namespace: None,
            import_microversion: None,
            entity_id: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConstraintType {
    #[serde(rename = "NONE")]
    NONE,
    #[serde(rename = "COINCIDENT")]
    COINCIDENT,
    #[serde(rename = "PARALLEL")]
    PARALLEL,
    #[serde(rename = "VERTICAL")]
    VERTICAL,
    #[serde(rename = "HORIZONTAL")]
    HORIZONTAL,
    #[serde(rename = "PERPENDICULAR")]
    PERPENDICULAR,
    #[serde(rename = "CONCENTRIC")]
    CONCENTRIC,
    #[serde(rename = "MIRROR")]
    MIRROR,
    #[serde(rename = "MIDPOINT")]
    MIDPOINT,
    #[serde(rename = "TANGENT")]
    TANGENT,
    #[serde(rename = "EQUAL")]
    EQUAL,
    #[serde(rename = "LENGTH")]
    LENGTH,
    #[serde(rename = "DISTANCE")]
    DISTANCE,
    #[serde(rename = "ANGLE")]
    ANGLE,
    #[serde(rename = "RADIUS")]
    RADIUS,
    #[serde(rename = "NORMAL")]
    NORMAL,
    #[serde(rename = "FIX")]
    FIX,
    #[serde(rename = "PROJECTED")]
    PROJECTED,
    #[serde(rename = "OFFSET")]
    OFFSET,
    #[serde(rename = "CIRCULAR_PATTERN")]
    CIRCULARPATTERN,
    #[serde(rename = "PIERCE")]
    PIERCE,
    #[serde(rename = "LINEAR_PATTERN")]
    LINEARPATTERN,
    #[serde(rename = "MAJOR_DIAMETER")]
    MAJORDIAMETER,
    #[serde(rename = "MINOR_DIAMETER")]
    MINORDIAMETER,
    #[serde(rename = "QUADRANT")]
    QUADRANT,
    #[serde(rename = "DIAMETER")]
    DIAMETER,
    #[serde(rename = "SILHOUETTED")]
    SILHOUETTED,
    #[serde(rename = "CENTERLINE_DIMENSION")]
    CENTERLINEDIMENSION,
    #[serde(rename = "INTERSECTED")]
    INTERSECTED,
    #[serde(rename = "RHO")]
    RHO,
    #[serde(rename = "EQUAL_CURVATURE")]
    EQUALCURVATURE,
    #[serde(rename = "UNKNOWN")]
    UNKNOWN,
}

