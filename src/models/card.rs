/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Card {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    #[serde(rename = "customer", skip_serializing_if = "Option::is_none")]
    pub customer: Option<String>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "addressCity", skip_serializing_if = "Option::is_none")]
    pub address_city: Option<String>,
    #[serde(rename = "addressCountry", skip_serializing_if = "Option::is_none")]
    pub address_country: Option<String>,
    #[serde(rename = "addressLine1", skip_serializing_if = "Option::is_none")]
    pub address_line1: Option<String>,
    #[serde(rename = "addressLine1Check", skip_serializing_if = "Option::is_none")]
    pub address_line1_check: Option<String>,
    #[serde(rename = "addressLine2", skip_serializing_if = "Option::is_none")]
    pub address_line2: Option<String>,
    #[serde(rename = "addressState", skip_serializing_if = "Option::is_none")]
    pub address_state: Option<String>,
    #[serde(rename = "addressZip", skip_serializing_if = "Option::is_none")]
    pub address_zip: Option<String>,
    #[serde(rename = "addressZipCheck", skip_serializing_if = "Option::is_none")]
    pub address_zip_check: Option<String>,
    #[serde(rename = "availablePayoutMethods", skip_serializing_if = "Option::is_none")]
    pub available_payout_methods: Option<Vec<String>>,
    #[serde(rename = "brand", skip_serializing_if = "Option::is_none")]
    pub brand: Option<String>,
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "cvcCheck", skip_serializing_if = "Option::is_none")]
    pub cvc_check: Option<String>,
    #[serde(rename = "defaultForCurrency", skip_serializing_if = "Option::is_none")]
    pub default_for_currency: Option<bool>,
    #[serde(rename = "dynamicLast4", skip_serializing_if = "Option::is_none")]
    pub dynamic_last4: Option<String>,
    #[serde(rename = "expMonth", skip_serializing_if = "Option::is_none")]
    pub exp_month: Option<i32>,
    #[serde(rename = "expYear", skip_serializing_if = "Option::is_none")]
    pub exp_year: Option<i32>,
    #[serde(rename = "fingerprint", skip_serializing_if = "Option::is_none")]
    pub fingerprint: Option<String>,
    #[serde(rename = "funding", skip_serializing_if = "Option::is_none")]
    pub funding: Option<String>,
    #[serde(rename = "last4", skip_serializing_if = "Option::is_none")]
    pub last4: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "recipient", skip_serializing_if = "Option::is_none")]
    pub recipient: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "threeDSecure", skip_serializing_if = "Option::is_none")]
    pub three_d_secure: Option<crate::models::ThreeDSecure>,
    #[serde(rename = "tokenizationMethod", skip_serializing_if = "Option::is_none")]
    pub tokenization_method: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "iin", skip_serializing_if = "Option::is_none")]
    pub iin: Option<String>,
    #[serde(rename = "issuer", skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "instanceURL", skip_serializing_if = "Option::is_none")]
    pub instance_url: Option<String>,
}

impl Card {
    pub fn new() -> Card {
        Card {
            id: None,
            object: None,
            account: None,
            customer: None,
            metadata: None,
            address_city: None,
            address_country: None,
            address_line1: None,
            address_line1_check: None,
            address_line2: None,
            address_state: None,
            address_zip: None,
            address_zip_check: None,
            available_payout_methods: None,
            brand: None,
            country: None,
            currency: None,
            cvc_check: None,
            default_for_currency: None,
            dynamic_last4: None,
            exp_month: None,
            exp_year: None,
            fingerprint: None,
            funding: None,
            last4: None,
            name: None,
            recipient: None,
            status: None,
            three_d_secure: None,
            tokenization_method: None,
            description: None,
            iin: None,
            issuer: None,
            _type: None,
            instance_url: None,
        }
    }
}


