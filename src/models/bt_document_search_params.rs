/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtDocumentSearchParams {
    #[serde(rename = "ownerId", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<String>,
    #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    #[serde(rename = "documentFilter", skip_serializing_if = "Option::is_none")]
    pub document_filter: Option<i32>,
    #[serde(rename = "sortColumn", skip_serializing_if = "Option::is_none")]
    pub sort_column: Option<String>,
    #[serde(rename = "sortOrder", skip_serializing_if = "Option::is_none")]
    pub sort_order: Option<String>,
    #[serde(rename = "foundIn", skip_serializing_if = "Option::is_none")]
    pub found_in: Option<FoundIn>,
    #[serde(rename = "when", skip_serializing_if = "Option::is_none")]
    pub when: Option<When>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "rawQuery", skip_serializing_if = "Option::is_none")]
    pub raw_query: Option<String>,
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
}

impl BtDocumentSearchParams {
    pub fn new() -> BtDocumentSearchParams {
        BtDocumentSearchParams {
            owner_id: None,
            parent_id: None,
            document_filter: None,
            sort_column: None,
            sort_order: None,
            found_in: None,
            when: None,
            _type: None,
            raw_query: None,
            offset: None,
            limit: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FoundIn {
    #[serde(rename = "ALL")]
    ALL,
    #[serde(rename = "WORKSPACES")]
    WORKSPACES,
    #[serde(rename = "VERSIONS")]
    VERSIONS,
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum When {
    #[serde(rename = "ALL")]
    ALL,
    #[serde(rename = "LATEST")]
    LATEST,
    #[serde(rename = "LATEST_PER_HIT")]
    LATESTPERHIT,
}

