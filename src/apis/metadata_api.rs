/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct MetadataApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> MetadataApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> MetadataApiClient<C> {
        MetadataApiClient {
            configuration,
        }
    }
}

pub trait MetadataApi {
    fn get_veop_standard_content_metadata(&self, did: &str, vid: &str, eid: &str, otype: &str, oid: &str, pid: &str, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_wmve_ps_metadata(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, configuration: Option<&str>, link_document_id: Option<&str>, infer_metadata_owner: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_wmvep_metadata(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, pid: &str, configuration: Option<&str>, link_document_id: Option<&str>, infer_metadata_owner: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_wv_es_metadata(&self, did: &str, wv: &str, wvid: &str, link_document_id: Option<&str>, infer_metadata_owner: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_wv_metadata(&self, did: &str, wv: &str, wvid: &str, link_document_id: Option<&str>, infer_metadata_owner: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_wve_metadata(&self, did: &str, wv: &str, wvid: &str, eid: &str, configuration: Option<&str>, link_document_id: Option<&str>, infer_metadata_owner: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_veop_standard_content_part_metadata(&self, did: &str, vid: &str, eid: &str, otype: &str, oid: &str, pid: &str, body: &str, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_wv_metadata(&self, did: &str, wv: &str, wvid: &str, body: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_wve_metadata(&self, did: &str, wv: &str, wvid: &str, eid: &str, body: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_wvep_metadata(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, pid: &str, sub_resource: &str, body: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>MetadataApi for MetadataApiClient<C> {
    fn get_veop_standard_content_metadata(&self, did: &str, vid: &str, eid: &str, otype: &str, oid: &str, pid: &str, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/{otype}/{oid}/p/{pid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("vid".to_string(), vid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_path_param("otype".to_string(), otype.to_string());
        req = req.with_path_param("oid".to_string(), oid.to_string());
        req = req.with_path_param("pid".to_string(), pid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_wmve_ps_metadata(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, configuration: Option<&str>, link_document_id: Option<&str>, infer_metadata_owner: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        if let Some(ref s) = infer_metadata_owner {
            req = req.with_query_param("inferMetadataOwner".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_wmvep_metadata(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, pid: &str, configuration: Option<&str>, link_document_id: Option<&str>, infer_metadata_owner: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p/{pid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        if let Some(ref s) = infer_metadata_owner {
            req = req.with_query_param("inferMetadataOwner".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_path_param("pid".to_string(), pid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_wv_es_metadata(&self, did: &str, wv: &str, wvid: &str, link_document_id: Option<&str>, infer_metadata_owner: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/metadata/d/{did}/{wv}/{wvid}/e".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        if let Some(ref s) = infer_metadata_owner {
            req = req.with_query_param("inferMetadataOwner".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wv".to_string(), wv.to_string());
        req = req.with_path_param("wvid".to_string(), wvid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_wv_metadata(&self, did: &str, wv: &str, wvid: &str, link_document_id: Option<&str>, infer_metadata_owner: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/metadata/d/{did}/{wv}/{wvid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        if let Some(ref s) = infer_metadata_owner {
            req = req.with_query_param("inferMetadataOwner".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wv".to_string(), wv.to_string());
        req = req.with_path_param("wvid".to_string(), wvid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_wve_metadata(&self, did: &str, wv: &str, wvid: &str, eid: &str, configuration: Option<&str>, link_document_id: Option<&str>, infer_metadata_owner: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/metadata/d/{did}/{wv}/{wvid}/e/{eid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        if let Some(ref s) = infer_metadata_owner {
            req = req.with_query_param("inferMetadataOwner".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wv".to_string(), wv.to_string());
        req = req.with_path_param("wvid".to_string(), wvid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn update_veop_standard_content_part_metadata(&self, did: &str, vid: &str, eid: &str, otype: &str, oid: &str, pid: &str, body: &str, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/{otype}/{oid}/p/{pid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("vid".to_string(), vid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_path_param("otype".to_string(), otype.to_string());
        req = req.with_path_param("oid".to_string(), oid.to_string());
        req = req.with_path_param("pid".to_string(), pid.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn update_wv_metadata(&self, did: &str, wv: &str, wvid: &str, body: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/metadata/d/{did}/{wv}/{wvid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wv".to_string(), wv.to_string());
        req = req.with_path_param("wvid".to_string(), wvid.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn update_wve_metadata(&self, did: &str, wv: &str, wvid: &str, eid: &str, body: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/metadata/d/{did}/{wv}/{wvid}/e/{eid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wv".to_string(), wv.to_string());
        req = req.with_path_param("wvid".to_string(), wvid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn update_wvep_metadata(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, pid: &str, sub_resource: &str, body: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p/{pid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_path_param("pid".to_string(), pid.to_string());
        req = req.with_path_param("subResource".to_string(), sub_resource.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
