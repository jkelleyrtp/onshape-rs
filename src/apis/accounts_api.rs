/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct AccountsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> AccountsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> AccountsApiClient<C> {
        AccountsApiClient {
            configuration,
        }
    }
}

pub trait AccountsApi {
    fn cancel_purchase_new(&self, aid: &str, pid: &str, cancel_immediately: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn consume_purchase(&self, pid: &str, bt_purchase_user_params: Option<crate::models::BtPurchaseUserParams>) -> Box<dyn Future<Item = crate::models::BtPurchaseInfo, Error = Error<serde_json::Value>>>;
    fn get_plan_purchases(&self, plan_id: &str, offset: Option<i32>, limit: Option<i32>) -> Box<dyn Future<Item = crate::models::BtListResponseBtPurchaseInfo, Error = Error<serde_json::Value>>>;
    fn get_purchases(&self, all: Option<bool>, own_purchase_only: Option<bool>) -> Box<dyn Future<Item = Vec<crate::models::BtPurchaseInfo>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>AccountsApi for AccountsApiClient<C> {
    fn cancel_purchase_new(&self, aid: &str, pid: &str, cancel_immediately: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/api/accounts/{aid}/purchases/{pid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = cancel_immediately {
            req = req.with_query_param("cancelImmediately".to_string(), s.to_string());
        }
        req = req.with_path_param("aid".to_string(), aid.to_string());
        req = req.with_path_param("pid".to_string(), pid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn consume_purchase(&self, pid: &str, bt_purchase_user_params: Option<crate::models::BtPurchaseUserParams>) -> Box<dyn Future<Item = crate::models::BtPurchaseInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/accounts/purchases/{pid}/consume".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("pid".to_string(), pid.to_string());
        req = req.with_body_param(bt_purchase_user_params);

        req.execute(self.configuration.borrow())
    }

    fn get_plan_purchases(&self, plan_id: &str, offset: Option<i32>, limit: Option<i32>) -> Box<dyn Future<Item = crate::models::BtListResponseBtPurchaseInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/accounts/plans/{planId}/purchases".to_string())
        ;
        if let Some(ref s) = offset {
            req = req.with_query_param("offset".to_string(), s.to_string());
        }
        if let Some(ref s) = limit {
            req = req.with_query_param("limit".to_string(), s.to_string());
        }
        req = req.with_path_param("planId".to_string(), plan_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_purchases(&self, all: Option<bool>, own_purchase_only: Option<bool>) -> Box<dyn Future<Item = Vec<crate::models::BtPurchaseInfo>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/accounts/purchases".to_string())
        ;
        if let Some(ref s) = all {
            req = req.with_query_param("all".to_string(), s.to_string());
        }
        if let Some(ref s) = own_purchase_only {
            req = req.with_query_param("ownPurchaseOnly".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

}
