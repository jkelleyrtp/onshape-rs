/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonNode {
    #[serde(rename = "textual", skip_serializing_if = "Option::is_none")]
    pub textual: Option<bool>,
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<bool>,
    #[serde(rename = "nodeType", skip_serializing_if = "Option::is_none")]
    pub node_type: Option<NodeType>,
    #[serde(rename = "binary", skip_serializing_if = "Option::is_none")]
    pub binary: Option<bool>,
    #[serde(rename = "missingNode", skip_serializing_if = "Option::is_none")]
    pub missing_node: Option<bool>,
    #[serde(rename = "boolean", skip_serializing_if = "Option::is_none")]
    pub boolean: Option<bool>,
    #[serde(rename = "valueNode", skip_serializing_if = "Option::is_none")]
    pub value_node: Option<bool>,
    #[serde(rename = "containerNode", skip_serializing_if = "Option::is_none")]
    pub container_node: Option<bool>,
    #[serde(rename = "pojo", skip_serializing_if = "Option::is_none")]
    pub pojo: Option<bool>,
    #[serde(rename = "number", skip_serializing_if = "Option::is_none")]
    pub number: Option<bool>,
    #[serde(rename = "integralNumber", skip_serializing_if = "Option::is_none")]
    pub integral_number: Option<bool>,
    #[serde(rename = "floatingPointNumber", skip_serializing_if = "Option::is_none")]
    pub floating_point_number: Option<bool>,
    #[serde(rename = "short", skip_serializing_if = "Option::is_none")]
    pub short: Option<bool>,
    #[serde(rename = "int", skip_serializing_if = "Option::is_none")]
    pub int: Option<bool>,
    #[serde(rename = "long", skip_serializing_if = "Option::is_none")]
    pub long: Option<bool>,
    #[serde(rename = "double", skip_serializing_if = "Option::is_none")]
    pub double: Option<bool>,
    #[serde(rename = "bigDecimal", skip_serializing_if = "Option::is_none")]
    pub big_decimal: Option<bool>,
    #[serde(rename = "bigInteger", skip_serializing_if = "Option::is_none")]
    pub big_integer: Option<bool>,
    #[serde(rename = "array", skip_serializing_if = "Option::is_none")]
    pub array: Option<bool>,
    #[serde(rename = "null", skip_serializing_if = "Option::is_none")]
    pub null: Option<bool>,
    #[serde(rename = "float", skip_serializing_if = "Option::is_none")]
    pub float: Option<bool>,
}

impl JsonNode {
    pub fn new() -> JsonNode {
        JsonNode {
            textual: None,
            object: None,
            node_type: None,
            binary: None,
            missing_node: None,
            boolean: None,
            value_node: None,
            container_node: None,
            pojo: None,
            number: None,
            integral_number: None,
            floating_point_number: None,
            short: None,
            int: None,
            long: None,
            double: None,
            big_decimal: None,
            big_integer: None,
            array: None,
            null: None,
            float: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NodeType {
    #[serde(rename = "ARRAY")]
    ARRAY,
    #[serde(rename = "BINARY")]
    BINARY,
    #[serde(rename = "BOOLEAN")]
    BOOLEAN,
    #[serde(rename = "MISSING")]
    MISSING,
    #[serde(rename = "NULL")]
    NULL,
    #[serde(rename = "NUMBER")]
    NUMBER,
    #[serde(rename = "OBJECT")]
    OBJECT,
    #[serde(rename = "POJO")]
    POJO,
    #[serde(rename = "STRING")]
    STRING,
}

