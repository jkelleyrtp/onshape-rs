/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Customer {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
    #[serde(rename = "accountBalance", skip_serializing_if = "Option::is_none")]
    pub account_balance: Option<i64>,
    #[serde(rename = "businessVatId", skip_serializing_if = "Option::is_none")]
    pub business_vat_id: Option<String>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<i64>,
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "defaultSource", skip_serializing_if = "Option::is_none")]
    pub default_source: Option<String>,
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[serde(rename = "delinquent", skip_serializing_if = "Option::is_none")]
    pub delinquent: Option<bool>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "discount", skip_serializing_if = "Option::is_none")]
    pub discount: Option<crate::models::Discount>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "livemode", skip_serializing_if = "Option::is_none")]
    pub livemode: Option<bool>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "shipping", skip_serializing_if = "Option::is_none")]
    pub shipping: Option<crate::models::ShippingDetails>,
    #[serde(rename = "sources", skip_serializing_if = "Option::is_none")]
    pub sources: Option<crate::models::ExternalAccountCollection>,
    #[serde(rename = "subscriptions", skip_serializing_if = "Option::is_none")]
    pub subscriptions: Option<crate::models::CustomerSubscriptionCollection>,
    #[serde(rename = "cards", skip_serializing_if = "Option::is_none")]
    pub cards: Option<crate::models::CustomerCardCollection>,
    #[serde(rename = "defaultCard", skip_serializing_if = "Option::is_none")]
    pub default_card: Option<String>,
    #[serde(rename = "nextRecurringCharge", skip_serializing_if = "Option::is_none")]
    pub next_recurring_charge: Option<crate::models::NextRecurringCharge>,
    #[serde(rename = "subscription", skip_serializing_if = "Option::is_none")]
    pub subscription: Option<crate::models::Subscription>,
    #[serde(rename = "trialEnd", skip_serializing_if = "Option::is_none")]
    pub trial_end: Option<i64>,
    #[serde(rename = "defaultSourceObject", skip_serializing_if = "Option::is_none")]
    pub default_source_object: Option<crate::models::ExternalAccount>,
}

impl Customer {
    pub fn new() -> Customer {
        Customer {
            id: None,
            object: None,
            account_balance: None,
            business_vat_id: None,
            created: None,
            currency: None,
            default_source: None,
            deleted: None,
            delinquent: None,
            description: None,
            discount: None,
            email: None,
            livemode: None,
            metadata: None,
            shipping: None,
            sources: None,
            subscriptions: None,
            cards: None,
            default_card: None,
            next_recurring_charge: None,
            subscription: None,
            trial_end: None,
            default_source_object: None,
        }
    }
}


