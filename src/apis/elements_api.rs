/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ElementsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> ElementsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ElementsApiClient<C> {
        ElementsApiClient {
            configuration,
        }
    }
}

pub trait ElementsApi {
    fn copy_element_from_source_document(&self, did: &str, wid: &str, bt_copy_element_params: crate::models::BtCopyElementParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn decode_configuration(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, cid: &str, link_document_id: Option<&str>, include_display: Option<bool>, configuration_is_id: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete8(&self, did: &str, wid: &str, eid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn encode_configuration_map(&self, did: &str, eid: &str, bt_configuration_params: crate::models::BtConfigurationParams, version_id: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_configuration(&self, did: &str, wvm: &str, wvmid: &str, eid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_element_by_version_deprecated(&self, did: &str, vid: &str, with_thumbnails: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_element_by_workspace_deprecated(&self, did: &str, wid: &str, with_thumbnails: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_element_metadata(&self, did: &str, wv: &str, wvid: &str, eid: &str, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_element_metadata_deprecated(&self, emid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_element_translator_formats(&self, did: &str, wid: &str, eid: &str, check_content: Option<bool>, configuration: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_translator_formats3(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_configuration(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_element_metadata(&self, did: &str, wv: &str, wvid: &str, eid: &str, btpdm_metadata_params: crate::models::BtpdmMetadataParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_references(&self, did: &str, wid: &str, eid: &str, bt_update_reference_params: crate::models::BtUpdateReferenceParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn upload_file1(&self, did: &str, element_id: Option<&str>, workspace_id: Option<&str>, content_disposition: Option<crate::models::crate::models::ContentDisposition>, entity: Option<crate::models::serde_json::Value>, media_type: Option<crate::models::crate::models::BodyPartMediaType>, message_body_workers: Option<crate::models::serde_json::Value>, parent: Option<crate::models::crate::models::MultiPart>, providers: Option<crate::models::serde_json::Value>, body_parts: Option<Vec<crate::models::BodyPart>>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>ElementsApi for ElementsApiClient<C> {
    fn copy_element_from_source_document(&self, did: &str, wid: &str, bt_copy_element_params: crate::models::BtCopyElementParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/elements/copyelement/{did}/workspace/{wid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_body_param(bt_copy_element_params);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn decode_configuration(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, cid: &str, link_document_id: Option<&str>, include_display: Option<bool>, configuration_is_id: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/elements/d/{did}/{wvm}/{wvmid}/e/{eid}/configurationencodings/{cid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        if let Some(ref s) = include_display {
            req = req.with_query_param("includeDisplay".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration_is_id {
            req = req.with_query_param("configurationIsId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_path_param("cid".to_string(), cid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete8(&self, did: &str, wid: &str, eid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/api/elements/d/{did}/w/{wid}/e/{eid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn encode_configuration_map(&self, did: &str, eid: &str, bt_configuration_params: crate::models::BtConfigurationParams, version_id: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/elements/d/{did}/e/{eid}/configurationencodings".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = version_id {
            req = req.with_query_param("versionId".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(bt_configuration_params);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_configuration(&self, did: &str, wvm: &str, wvmid: &str, eid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/elements/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_element_by_version_deprecated(&self, did: &str, vid: &str, with_thumbnails: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/elements/{did}/version/{vid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = with_thumbnails {
            req = req.with_query_param("withThumbnails".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("vid".to_string(), vid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_element_by_workspace_deprecated(&self, did: &str, wid: &str, with_thumbnails: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/elements/{did}/workspace/{wid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = with_thumbnails {
            req = req.with_query_param("withThumbnails".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_element_metadata(&self, did: &str, wv: &str, wvid: &str, eid: &str, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/elements/d/{did}/{wv}/{wvid}/e/{eid}/metadata".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wv".to_string(), wv.to_string());
        req = req.with_path_param("wvid".to_string(), wvid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_element_metadata_deprecated(&self, emid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/elements/{emid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("emid".to_string(), emid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_element_translator_formats(&self, did: &str, wid: &str, eid: &str, check_content: Option<bool>, configuration: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/elements/translatorFormats/{did}/{wid}/{eid}".to_string())
        ;
        if let Some(ref s) = check_content {
            req = req.with_query_param("checkContent".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_translator_formats3(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/elements/translatorFormats".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn update_configuration(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/elements/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn update_element_metadata(&self, did: &str, wv: &str, wvid: &str, eid: &str, btpdm_metadata_params: crate::models::BtpdmMetadataParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/elements/d/{did}/{wv}/{wvid}/e/{eid}/metadata".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wv".to_string(), wv.to_string());
        req = req.with_path_param("wvid".to_string(), wvid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(btpdm_metadata_params);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn update_references(&self, did: &str, wid: &str, eid: &str, bt_update_reference_params: crate::models::BtUpdateReferenceParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/elements/d/{did}/w/{wid}/e/{eid}/updatereferences".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(bt_update_reference_params);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn upload_file1(&self, did: &str, element_id: Option<&str>, workspace_id: Option<&str>, content_disposition: Option<crate::models::crate::models::ContentDisposition>, entity: Option<crate::models::serde_json::Value>, media_type: Option<crate::models::crate::models::BodyPartMediaType>, message_body_workers: Option<crate::models::serde_json::Value>, parent: Option<crate::models::crate::models::MultiPart>, providers: Option<crate::models::serde_json::Value>, body_parts: Option<Vec<crate::models::BodyPart>>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/elements/upload/{did}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = element_id {
            req = req.with_query_param("elementId".to_string(), s.to_string());
        }
        if let Some(ref s) = workspace_id {
            req = req.with_query_param("workspaceId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        if let Some(param_value) = content_disposition {
            req = req.with_form_param("contentDisposition".to_string(), param_value.to_string());
        }
        if let Some(param_value) = entity {
            req = req.with_form_param("entity".to_string(), param_value.to_string());
        }
        if let Some(param_value) = media_type {
            req = req.with_form_param("mediaType".to_string(), param_value.to_string());
        }
        if let Some(param_value) = message_body_workers {
            req = req.with_form_param("messageBodyWorkers".to_string(), param_value.to_string());
        }
        if let Some(param_value) = parent {
            req = req.with_form_param("parent".to_string(), param_value.to_string());
        }
        if let Some(param_value) = providers {
            req = req.with_form_param("providers".to_string(), param_value.to_string());
        }
        if let Some(param_value) = body_parts {
            req = req.with_form_param("bodyParts".to_string(), param_value.join(",").to_string());
        }
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
