/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "jsontype")]
pub enum BtGlobalTreeNodeInfo {
    #[serde(rename="BTCloudStorageAccountInfo")]
    BtCloudStorageAccountInfo {
        #[serde(rename = "treeHref", skip_serializing_if = "Option::is_none")]
        tree_href: Option<String>,
        #[serde(rename = "isMutable", skip_serializing_if = "Option::is_none")]
        is_mutable: Option<bool>,
        #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
        resource_type: Option<String>,
        #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
        description: Option<String>,
        #[serde(rename = "modifiedAt", skip_serializing_if = "Option::is_none")]
        modified_at: Option<String>,
        #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
        created_at: Option<String>,
        #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
        created_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
        modified_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
        project_id: Option<String>,
        #[serde(rename = "canMove", skip_serializing_if = "Option::is_none")]
        can_move: Option<bool>,
        #[serde(rename = "isContainer", skip_serializing_if = "Option::is_none")]
        is_container: Option<bool>,
        #[serde(rename = "isEnterpriseOwned", skip_serializing_if = "Option::is_none")]
        is_enterprise_owned: Option<bool>,
        #[serde(rename = "hasPendingOwner", skip_serializing_if = "Option::is_none")]
        has_pending_owner: Option<bool>,
        #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
        owner: Option<crate::models::BtOwnerInfo>,
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        #[serde(rename = "viewRef", skip_serializing_if = "Option::is_none")]
        view_ref: Option<String>,
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        #[serde(rename = "cloudStorageAccountId_", skip_serializing_if = "Option::is_none")]
        cloud_storage_account_id_: Option<String>,
        #[serde(rename = "cloudStorageAccountId", skip_serializing_if = "Option::is_none")]
        cloud_storage_account_id: Option<String>,
        #[serde(rename = "importFolder", skip_serializing_if = "Option::is_none")]
        import_folder: Option<crate::models::BtCloudStorageObjectInfo>,
        #[serde(rename = "exportFolder", skip_serializing_if = "Option::is_none")]
        export_folder: Option<crate::models::BtCloudStorageObjectInfo>,
        #[serde(rename = "cloudStorageProvider", skip_serializing_if = "Option::is_none")]
        cloud_storage_provider: Option<i32>,
        #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
        enabled: Option<bool>,
    },
    #[serde(rename="BTDocumentInfo")]
    BtDocumentInfo {
        #[serde(rename = "treeHref", skip_serializing_if = "Option::is_none")]
        tree_href: Option<String>,
        #[serde(rename = "isMutable", skip_serializing_if = "Option::is_none")]
        is_mutable: Option<bool>,
        #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
        resource_type: Option<String>,
        #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
        description: Option<String>,
        #[serde(rename = "modifiedAt", skip_serializing_if = "Option::is_none")]
        modified_at: Option<String>,
        #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
        created_at: Option<String>,
        #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
        created_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
        modified_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
        project_id: Option<String>,
        #[serde(rename = "canMove", skip_serializing_if = "Option::is_none")]
        can_move: Option<bool>,
        #[serde(rename = "isContainer", skip_serializing_if = "Option::is_none")]
        is_container: Option<bool>,
        #[serde(rename = "isEnterpriseOwned", skip_serializing_if = "Option::is_none")]
        is_enterprise_owned: Option<bool>,
        #[serde(rename = "hasPendingOwner", skip_serializing_if = "Option::is_none")]
        has_pending_owner: Option<bool>,
        #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
        owner: Option<crate::models::BtOwnerInfo>,
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        #[serde(rename = "viewRef", skip_serializing_if = "Option::is_none")]
        view_ref: Option<String>,
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        #[serde(rename = "defaultElementId", skip_serializing_if = "Option::is_none")]
        default_element_id: Option<String>,
        #[serde(rename = "defaultWorkspace", skip_serializing_if = "Option::is_none")]
        default_workspace: Option<crate::models::BtBaseInfo>,
        #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
        parent_id: Option<String>,
        #[serde(rename = "permissionSet", skip_serializing_if = "Option::is_none")]
        permission_set: Option<serde_json::Value>,
        #[serde(rename = "trash", skip_serializing_if = "Option::is_none")]
        trash: Option<bool>,
        #[serde(rename = "totalWorkspacesUpdating", skip_serializing_if = "Option::is_none")]
        total_workspaces_updating: Option<i32>,
        #[serde(rename = "totalWorkspacesScheduledForUpdate", skip_serializing_if = "Option::is_none")]
        total_workspaces_scheduled_for_update: Option<i32>,
        #[serde(rename = "canUnshare", skip_serializing_if = "Option::is_none")]
        can_unshare: Option<bool>,
        #[serde(rename = "thumbnail", skip_serializing_if = "Option::is_none")]
        thumbnail: Option<crate::models::BtThumbnailInfo>,
        #[serde(rename = "supportTeamUserAndShared", skip_serializing_if = "Option::is_none")]
        support_team_user_and_shared: Option<bool>,
        #[serde(rename = "likedByCurrentUser", skip_serializing_if = "Option::is_none")]
        liked_by_current_user: Option<bool>,
        #[serde(rename = "documentLabels", skip_serializing_if = "Option::is_none")]
        document_labels: Option<Vec<crate::models::BtDocumentLabelInfo>>,
        #[serde(rename = "numberOfTimesReferenced", skip_serializing_if = "Option::is_none")]
        number_of_times_referenced: Option<i64>,
        #[serde(rename = "numberOfTimesCopied", skip_serializing_if = "Option::is_none")]
        number_of_times_copied: Option<i64>,
        #[serde(rename = "likes", skip_serializing_if = "Option::is_none")]
        likes: Option<i64>,
        #[serde(rename = "recentVersion", skip_serializing_if = "Option::is_none")]
        recent_version: Option<crate::models::BtBaseInfo>,
        #[serde(rename = "hasRelevantInsertables", skip_serializing_if = "Option::is_none")]
        has_relevant_insertables: Option<bool>,
        #[serde(rename = "createdWithEducationPlan", skip_serializing_if = "Option::is_none")]
        created_with_education_plan: Option<bool>,
        #[serde(rename = "notRevisionManaged", skip_serializing_if = "Option::is_none")]
        not_revision_managed: Option<bool>,
        #[serde(rename = "anonymousAccessAllowed", skip_serializing_if = "Option::is_none")]
        anonymous_access_allowed: Option<bool>,
        #[serde(rename = "anonymousAllowsExport", skip_serializing_if = "Option::is_none")]
        anonymous_allows_export: Option<bool>,
        #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
        tags: Option<Vec<String>>,
        #[serde(rename = "trashedAt", skip_serializing_if = "Option::is_none")]
        trashed_at: Option<String>,
        #[serde(rename = "isOrphaned", skip_serializing_if = "Option::is_none")]
        is_orphaned: Option<bool>,
        #[serde(rename = "public", skip_serializing_if = "Option::is_none")]
        public: Option<bool>,
        #[serde(rename = "userAccountLimitsBreached", skip_serializing_if = "Option::is_none")]
        user_account_limits_breached: Option<bool>,
        #[serde(rename = "isUsingManagedWorkflow", skip_serializing_if = "Option::is_none")]
        is_using_managed_workflow: Option<bool>,
        #[serde(rename = "permission", skip_serializing_if = "Option::is_none")]
        permission: Option<Permission>,
        #[serde(rename = "hasReleaseRevisionableObjects", skip_serializing_if = "Option::is_none")]
        has_release_revisionable_objects: Option<bool>,
        #[serde(rename = "documentThumbnailElementId", skip_serializing_if = "Option::is_none")]
        document_thumbnail_element_id: Option<String>,
        #[serde(rename = "duplicateNameViolationError", skip_serializing_if = "Option::is_none")]
        duplicate_name_violation_error: Option<String>,
        #[serde(rename = "betaCapabilityIds", skip_serializing_if = "Option::is_none")]
        beta_capability_ids: Option<Vec<String>>,
        #[serde(rename = "isUpgradedToLatestVersion", skip_serializing_if = "Option::is_none")]
        is_upgraded_to_latest_version: Option<bool>,
    },
    #[serde(rename="BTDocumentLabelInfo")]
    BtDocumentLabelInfo {
        #[serde(rename = "treeHref", skip_serializing_if = "Option::is_none")]
        tree_href: Option<String>,
        #[serde(rename = "isMutable", skip_serializing_if = "Option::is_none")]
        is_mutable: Option<bool>,
        #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
        resource_type: Option<String>,
        #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
        description: Option<String>,
        #[serde(rename = "modifiedAt", skip_serializing_if = "Option::is_none")]
        modified_at: Option<String>,
        #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
        created_at: Option<String>,
        #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
        created_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
        modified_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
        project_id: Option<String>,
        #[serde(rename = "canMove", skip_serializing_if = "Option::is_none")]
        can_move: Option<bool>,
        #[serde(rename = "isContainer", skip_serializing_if = "Option::is_none")]
        is_container: Option<bool>,
        #[serde(rename = "isEnterpriseOwned", skip_serializing_if = "Option::is_none")]
        is_enterprise_owned: Option<bool>,
        #[serde(rename = "hasPendingOwner", skip_serializing_if = "Option::is_none")]
        has_pending_owner: Option<bool>,
        #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
        owner: Option<crate::models::BtOwnerInfo>,
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        #[serde(rename = "viewRef", skip_serializing_if = "Option::is_none")]
        view_ref: Option<String>,
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
        path: Option<String>,
        #[serde(rename = "parentLabelId", skip_serializing_if = "Option::is_none")]
        parent_label_id: Option<String>,
    },
    #[serde(rename="BTDocumentProcessingInfo")]
    BtDocumentProcessingInfo {
        #[serde(rename = "treeHref", skip_serializing_if = "Option::is_none")]
        tree_href: Option<String>,
        #[serde(rename = "isMutable", skip_serializing_if = "Option::is_none")]
        is_mutable: Option<bool>,
        #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
        resource_type: Option<String>,
        #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
        description: Option<String>,
        #[serde(rename = "modifiedAt", skip_serializing_if = "Option::is_none")]
        modified_at: Option<String>,
        #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
        created_at: Option<String>,
        #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
        created_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
        modified_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
        project_id: Option<String>,
        #[serde(rename = "canMove", skip_serializing_if = "Option::is_none")]
        can_move: Option<bool>,
        #[serde(rename = "isContainer", skip_serializing_if = "Option::is_none")]
        is_container: Option<bool>,
        #[serde(rename = "isEnterpriseOwned", skip_serializing_if = "Option::is_none")]
        is_enterprise_owned: Option<bool>,
        #[serde(rename = "hasPendingOwner", skip_serializing_if = "Option::is_none")]
        has_pending_owner: Option<bool>,
        #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
        owner: Option<crate::models::BtOwnerInfo>,
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        #[serde(rename = "viewRef", skip_serializing_if = "Option::is_none")]
        view_ref: Option<String>,
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        #[serde(rename = "defaultElementId", skip_serializing_if = "Option::is_none")]
        default_element_id: Option<String>,
        #[serde(rename = "defaultWorkspace", skip_serializing_if = "Option::is_none")]
        default_workspace: Option<crate::models::BtBaseInfo>,
        #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
        parent_id: Option<String>,
        #[serde(rename = "permissionSet", skip_serializing_if = "Option::is_none")]
        permission_set: Option<serde_json::Value>,
        #[serde(rename = "trash", skip_serializing_if = "Option::is_none")]
        trash: Option<bool>,
        #[serde(rename = "totalWorkspacesUpdating", skip_serializing_if = "Option::is_none")]
        total_workspaces_updating: Option<i32>,
        #[serde(rename = "totalWorkspacesScheduledForUpdate", skip_serializing_if = "Option::is_none")]
        total_workspaces_scheduled_for_update: Option<i32>,
        #[serde(rename = "canUnshare", skip_serializing_if = "Option::is_none")]
        can_unshare: Option<bool>,
        #[serde(rename = "thumbnail", skip_serializing_if = "Option::is_none")]
        thumbnail: Option<crate::models::BtThumbnailInfo>,
        #[serde(rename = "supportTeamUserAndShared", skip_serializing_if = "Option::is_none")]
        support_team_user_and_shared: Option<bool>,
        #[serde(rename = "likedByCurrentUser", skip_serializing_if = "Option::is_none")]
        liked_by_current_user: Option<bool>,
        #[serde(rename = "documentLabels", skip_serializing_if = "Option::is_none")]
        document_labels: Option<Vec<crate::models::BtDocumentLabelInfo>>,
        #[serde(rename = "numberOfTimesReferenced", skip_serializing_if = "Option::is_none")]
        number_of_times_referenced: Option<i64>,
        #[serde(rename = "numberOfTimesCopied", skip_serializing_if = "Option::is_none")]
        number_of_times_copied: Option<i64>,
        #[serde(rename = "likes", skip_serializing_if = "Option::is_none")]
        likes: Option<i64>,
        #[serde(rename = "recentVersion", skip_serializing_if = "Option::is_none")]
        recent_version: Option<crate::models::BtBaseInfo>,
        #[serde(rename = "hasRelevantInsertables", skip_serializing_if = "Option::is_none")]
        has_relevant_insertables: Option<bool>,
        #[serde(rename = "createdWithEducationPlan", skip_serializing_if = "Option::is_none")]
        created_with_education_plan: Option<bool>,
        #[serde(rename = "notRevisionManaged", skip_serializing_if = "Option::is_none")]
        not_revision_managed: Option<bool>,
        #[serde(rename = "anonymousAccessAllowed", skip_serializing_if = "Option::is_none")]
        anonymous_access_allowed: Option<bool>,
        #[serde(rename = "anonymousAllowsExport", skip_serializing_if = "Option::is_none")]
        anonymous_allows_export: Option<bool>,
        #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
        tags: Option<Vec<String>>,
        #[serde(rename = "trashedAt", skip_serializing_if = "Option::is_none")]
        trashed_at: Option<String>,
        #[serde(rename = "isOrphaned", skip_serializing_if = "Option::is_none")]
        is_orphaned: Option<bool>,
        #[serde(rename = "public", skip_serializing_if = "Option::is_none")]
        public: Option<bool>,
        #[serde(rename = "userAccountLimitsBreached", skip_serializing_if = "Option::is_none")]
        user_account_limits_breached: Option<bool>,
        #[serde(rename = "isUsingManagedWorkflow", skip_serializing_if = "Option::is_none")]
        is_using_managed_workflow: Option<bool>,
        #[serde(rename = "permission", skip_serializing_if = "Option::is_none")]
        permission: Option<Permission>,
        #[serde(rename = "hasReleaseRevisionableObjects", skip_serializing_if = "Option::is_none")]
        has_release_revisionable_objects: Option<bool>,
        #[serde(rename = "documentThumbnailElementId", skip_serializing_if = "Option::is_none")]
        document_thumbnail_element_id: Option<String>,
        #[serde(rename = "duplicateNameViolationError", skip_serializing_if = "Option::is_none")]
        duplicate_name_violation_error: Option<String>,
        #[serde(rename = "betaCapabilityIds", skip_serializing_if = "Option::is_none")]
        beta_capability_ids: Option<Vec<String>>,
        #[serde(rename = "isUpgradedToLatestVersion", skip_serializing_if = "Option::is_none")]
        is_upgraded_to_latest_version: Option<bool>,
        #[serde(rename = "translationId", skip_serializing_if = "Option::is_none")]
        translation_id: Option<String>,
        #[serde(rename = "translationEventKey", skip_serializing_if = "Option::is_none")]
        translation_event_key: Option<String>,
    },
    #[serde(rename="BTDocumentSummaryInfo")]
    BtDocumentSummaryInfo {
        #[serde(rename = "treeHref", skip_serializing_if = "Option::is_none")]
        tree_href: Option<String>,
        #[serde(rename = "isMutable", skip_serializing_if = "Option::is_none")]
        is_mutable: Option<bool>,
        #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
        resource_type: Option<String>,
        #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
        description: Option<String>,
        #[serde(rename = "modifiedAt", skip_serializing_if = "Option::is_none")]
        modified_at: Option<String>,
        #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
        created_at: Option<String>,
        #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
        created_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
        modified_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
        project_id: Option<String>,
        #[serde(rename = "canMove", skip_serializing_if = "Option::is_none")]
        can_move: Option<bool>,
        #[serde(rename = "isContainer", skip_serializing_if = "Option::is_none")]
        is_container: Option<bool>,
        #[serde(rename = "isEnterpriseOwned", skip_serializing_if = "Option::is_none")]
        is_enterprise_owned: Option<bool>,
        #[serde(rename = "hasPendingOwner", skip_serializing_if = "Option::is_none")]
        has_pending_owner: Option<bool>,
        #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
        owner: Option<crate::models::BtOwnerInfo>,
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        #[serde(rename = "viewRef", skip_serializing_if = "Option::is_none")]
        view_ref: Option<String>,
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        #[serde(rename = "defaultElementId", skip_serializing_if = "Option::is_none")]
        default_element_id: Option<String>,
        #[serde(rename = "defaultWorkspace", skip_serializing_if = "Option::is_none")]
        default_workspace: Option<crate::models::BtBaseInfo>,
        #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
        parent_id: Option<String>,
        #[serde(rename = "permissionSet", skip_serializing_if = "Option::is_none")]
        permission_set: Option<serde_json::Value>,
        #[serde(rename = "trash", skip_serializing_if = "Option::is_none")]
        trash: Option<bool>,
        #[serde(rename = "totalWorkspacesUpdating", skip_serializing_if = "Option::is_none")]
        total_workspaces_updating: Option<i32>,
        #[serde(rename = "totalWorkspacesScheduledForUpdate", skip_serializing_if = "Option::is_none")]
        total_workspaces_scheduled_for_update: Option<i32>,
        #[serde(rename = "canUnshare", skip_serializing_if = "Option::is_none")]
        can_unshare: Option<bool>,
        #[serde(rename = "thumbnail", skip_serializing_if = "Option::is_none")]
        thumbnail: Option<crate::models::BtThumbnailInfo>,
        #[serde(rename = "supportTeamUserAndShared", skip_serializing_if = "Option::is_none")]
        support_team_user_and_shared: Option<bool>,
        #[serde(rename = "likedByCurrentUser", skip_serializing_if = "Option::is_none")]
        liked_by_current_user: Option<bool>,
        #[serde(rename = "documentLabels", skip_serializing_if = "Option::is_none")]
        document_labels: Option<Vec<crate::models::BtDocumentLabelInfo>>,
        #[serde(rename = "numberOfTimesReferenced", skip_serializing_if = "Option::is_none")]
        number_of_times_referenced: Option<i64>,
        #[serde(rename = "numberOfTimesCopied", skip_serializing_if = "Option::is_none")]
        number_of_times_copied: Option<i64>,
        #[serde(rename = "likes", skip_serializing_if = "Option::is_none")]
        likes: Option<i64>,
        #[serde(rename = "recentVersion", skip_serializing_if = "Option::is_none")]
        recent_version: Option<crate::models::BtBaseInfo>,
        #[serde(rename = "hasRelevantInsertables", skip_serializing_if = "Option::is_none")]
        has_relevant_insertables: Option<bool>,
        #[serde(rename = "createdWithEducationPlan", skip_serializing_if = "Option::is_none")]
        created_with_education_plan: Option<bool>,
        #[serde(rename = "notRevisionManaged", skip_serializing_if = "Option::is_none")]
        not_revision_managed: Option<bool>,
        #[serde(rename = "anonymousAccessAllowed", skip_serializing_if = "Option::is_none")]
        anonymous_access_allowed: Option<bool>,
        #[serde(rename = "anonymousAllowsExport", skip_serializing_if = "Option::is_none")]
        anonymous_allows_export: Option<bool>,
        #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
        tags: Option<Vec<String>>,
        #[serde(rename = "trashedAt", skip_serializing_if = "Option::is_none")]
        trashed_at: Option<String>,
        #[serde(rename = "isOrphaned", skip_serializing_if = "Option::is_none")]
        is_orphaned: Option<bool>,
        #[serde(rename = "public", skip_serializing_if = "Option::is_none")]
        public: Option<bool>,
        #[serde(rename = "userAccountLimitsBreached", skip_serializing_if = "Option::is_none")]
        user_account_limits_breached: Option<bool>,
        #[serde(rename = "isUsingManagedWorkflow", skip_serializing_if = "Option::is_none")]
        is_using_managed_workflow: Option<bool>,
        #[serde(rename = "permission", skip_serializing_if = "Option::is_none")]
        permission: Option<Permission>,
        #[serde(rename = "hasReleaseRevisionableObjects", skip_serializing_if = "Option::is_none")]
        has_release_revisionable_objects: Option<bool>,
    },
    #[serde(rename="BTDocumentSummarySearchInfo")]
    BtDocumentSummarySearchInfo {
        #[serde(rename = "treeHref", skip_serializing_if = "Option::is_none")]
        tree_href: Option<String>,
        #[serde(rename = "isMutable", skip_serializing_if = "Option::is_none")]
        is_mutable: Option<bool>,
        #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
        resource_type: Option<String>,
        #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
        description: Option<String>,
        #[serde(rename = "modifiedAt", skip_serializing_if = "Option::is_none")]
        modified_at: Option<String>,
        #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
        created_at: Option<String>,
        #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
        created_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
        modified_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
        project_id: Option<String>,
        #[serde(rename = "canMove", skip_serializing_if = "Option::is_none")]
        can_move: Option<bool>,
        #[serde(rename = "isContainer", skip_serializing_if = "Option::is_none")]
        is_container: Option<bool>,
        #[serde(rename = "isEnterpriseOwned", skip_serializing_if = "Option::is_none")]
        is_enterprise_owned: Option<bool>,
        #[serde(rename = "hasPendingOwner", skip_serializing_if = "Option::is_none")]
        has_pending_owner: Option<bool>,
        #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
        owner: Option<crate::models::BtOwnerInfo>,
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        #[serde(rename = "viewRef", skip_serializing_if = "Option::is_none")]
        view_ref: Option<String>,
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        #[serde(rename = "defaultElementId", skip_serializing_if = "Option::is_none")]
        default_element_id: Option<String>,
        #[serde(rename = "defaultWorkspace", skip_serializing_if = "Option::is_none")]
        default_workspace: Option<crate::models::BtBaseInfo>,
        #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
        parent_id: Option<String>,
        #[serde(rename = "permissionSet", skip_serializing_if = "Option::is_none")]
        permission_set: Option<serde_json::Value>,
        #[serde(rename = "trash", skip_serializing_if = "Option::is_none")]
        trash: Option<bool>,
        #[serde(rename = "totalWorkspacesUpdating", skip_serializing_if = "Option::is_none")]
        total_workspaces_updating: Option<i32>,
        #[serde(rename = "totalWorkspacesScheduledForUpdate", skip_serializing_if = "Option::is_none")]
        total_workspaces_scheduled_for_update: Option<i32>,
        #[serde(rename = "canUnshare", skip_serializing_if = "Option::is_none")]
        can_unshare: Option<bool>,
        #[serde(rename = "thumbnail", skip_serializing_if = "Option::is_none")]
        thumbnail: Option<crate::models::BtThumbnailInfo>,
        #[serde(rename = "supportTeamUserAndShared", skip_serializing_if = "Option::is_none")]
        support_team_user_and_shared: Option<bool>,
        #[serde(rename = "likedByCurrentUser", skip_serializing_if = "Option::is_none")]
        liked_by_current_user: Option<bool>,
        #[serde(rename = "documentLabels", skip_serializing_if = "Option::is_none")]
        document_labels: Option<Vec<crate::models::BtDocumentLabelInfo>>,
        #[serde(rename = "numberOfTimesReferenced", skip_serializing_if = "Option::is_none")]
        number_of_times_referenced: Option<i64>,
        #[serde(rename = "numberOfTimesCopied", skip_serializing_if = "Option::is_none")]
        number_of_times_copied: Option<i64>,
        #[serde(rename = "likes", skip_serializing_if = "Option::is_none")]
        likes: Option<i64>,
        #[serde(rename = "recentVersion", skip_serializing_if = "Option::is_none")]
        recent_version: Option<crate::models::BtBaseInfo>,
        #[serde(rename = "hasRelevantInsertables", skip_serializing_if = "Option::is_none")]
        has_relevant_insertables: Option<bool>,
        #[serde(rename = "createdWithEducationPlan", skip_serializing_if = "Option::is_none")]
        created_with_education_plan: Option<bool>,
        #[serde(rename = "notRevisionManaged", skip_serializing_if = "Option::is_none")]
        not_revision_managed: Option<bool>,
        #[serde(rename = "anonymousAccessAllowed", skip_serializing_if = "Option::is_none")]
        anonymous_access_allowed: Option<bool>,
        #[serde(rename = "anonymousAllowsExport", skip_serializing_if = "Option::is_none")]
        anonymous_allows_export: Option<bool>,
        #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
        tags: Option<Vec<String>>,
        #[serde(rename = "trashedAt", skip_serializing_if = "Option::is_none")]
        trashed_at: Option<String>,
        #[serde(rename = "isOrphaned", skip_serializing_if = "Option::is_none")]
        is_orphaned: Option<bool>,
        #[serde(rename = "public", skip_serializing_if = "Option::is_none")]
        public: Option<bool>,
        #[serde(rename = "userAccountLimitsBreached", skip_serializing_if = "Option::is_none")]
        user_account_limits_breached: Option<bool>,
        #[serde(rename = "isUsingManagedWorkflow", skip_serializing_if = "Option::is_none")]
        is_using_managed_workflow: Option<bool>,
        #[serde(rename = "permission", skip_serializing_if = "Option::is_none")]
        permission: Option<Permission>,
        #[serde(rename = "hasReleaseRevisionableObjects", skip_serializing_if = "Option::is_none")]
        has_release_revisionable_objects: Option<bool>,
        #[serde(rename = "searchHits", skip_serializing_if = "Option::is_none")]
        search_hits: Option<Vec<crate::models::BtDocumentSearchHitInfo>>,
    },
    #[serde(rename="BTFolderInfo")]
    BtFolderInfo {
        #[serde(rename = "treeHref", skip_serializing_if = "Option::is_none")]
        tree_href: Option<String>,
        #[serde(rename = "isMutable", skip_serializing_if = "Option::is_none")]
        is_mutable: Option<bool>,
        #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
        resource_type: Option<String>,
        #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
        description: Option<String>,
        #[serde(rename = "modifiedAt", skip_serializing_if = "Option::is_none")]
        modified_at: Option<String>,
        #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
        created_at: Option<String>,
        #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
        created_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
        modified_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
        project_id: Option<String>,
        #[serde(rename = "canMove", skip_serializing_if = "Option::is_none")]
        can_move: Option<bool>,
        #[serde(rename = "isContainer", skip_serializing_if = "Option::is_none")]
        is_container: Option<bool>,
        #[serde(rename = "isEnterpriseOwned", skip_serializing_if = "Option::is_none")]
        is_enterprise_owned: Option<bool>,
        #[serde(rename = "hasPendingOwner", skip_serializing_if = "Option::is_none")]
        has_pending_owner: Option<bool>,
        #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
        owner: Option<crate::models::BtOwnerInfo>,
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        #[serde(rename = "viewRef", skip_serializing_if = "Option::is_none")]
        view_ref: Option<String>,
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
        parent_id: Option<String>,
        #[serde(rename = "permissionSet", skip_serializing_if = "Option::is_none")]
        permission_set: Option<serde_json::Value>,
        #[serde(rename = "trash", skip_serializing_if = "Option::is_none")]
        trash: Option<bool>,
        #[serde(rename = "canUnshare", skip_serializing_if = "Option::is_none")]
        can_unshare: Option<bool>,
        #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
        active: Option<bool>,
        #[serde(rename = "trashedAt", skip_serializing_if = "Option::is_none")]
        trashed_at: Option<String>,
        #[serde(rename = "isOrphaned", skip_serializing_if = "Option::is_none")]
        is_orphaned: Option<bool>,
    },
    #[serde(rename="BTGlobalTreeMagicNodeInfo")]
    BtGlobalTreeMagicNodeInfo {
        #[serde(rename = "treeHref", skip_serializing_if = "Option::is_none")]
        tree_href: Option<String>,
        #[serde(rename = "isMutable", skip_serializing_if = "Option::is_none")]
        is_mutable: Option<bool>,
        #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
        resource_type: Option<String>,
        #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
        description: Option<String>,
        #[serde(rename = "modifiedAt", skip_serializing_if = "Option::is_none")]
        modified_at: Option<String>,
        #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
        created_at: Option<String>,
        #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
        created_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
        modified_by: Option<crate::models::BtUserBasicSummaryInfo>,
        #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
        project_id: Option<String>,
        #[serde(rename = "canMove", skip_serializing_if = "Option::is_none")]
        can_move: Option<bool>,
        #[serde(rename = "isContainer", skip_serializing_if = "Option::is_none")]
        is_container: Option<bool>,
        #[serde(rename = "isEnterpriseOwned", skip_serializing_if = "Option::is_none")]
        is_enterprise_owned: Option<bool>,
        #[serde(rename = "hasPendingOwner", skip_serializing_if = "Option::is_none")]
        has_pending_owner: Option<bool>,
        #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
        owner: Option<crate::models::BtOwnerInfo>,
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        #[serde(rename = "viewRef", skip_serializing_if = "Option::is_none")]
        view_ref: Option<String>,
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        #[serde(rename = "subType", skip_serializing_if = "Option::is_none")]
        sub_type: Option<i32>,
    },
}




