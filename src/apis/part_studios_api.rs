/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PartStudiosApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PartStudiosApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PartStudiosApiClient<C> {
        PartStudiosApiClient {
            configuration,
        }
    }
}

pub trait PartStudiosApi {
    fn add_feature1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, body: Option<&str>) -> Box<dyn Future<Item = crate::models::BtFeatureDefinitionResponse, Error = Error<serde_json::Value>>>;
    fn compare_part_studios(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, workspace_id: Option<&str>, version_id: Option<&str>, microversion_id: Option<&str>, source_configuration: Option<&str>, target_configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtRootDiffInfo, Error = Error<serde_json::Value>>>;
    fn create_part_studio(&self, did: &str, wid: &str, bt_model_element_params: crate::models::BtModelElementParams) -> Box<dyn Future<Item = crate::models::BtDocumentElementInfo, Error = Error<serde_json::Value>>>;
    fn delete_feature1(&self, did: &str, wid: &str, eid: &str, fid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn eval_feature_script(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, configuration: Option<&str>, bt_feature_script_eval_call: Option<crate::models::BtFeatureScriptEvalCall>) -> Box<dyn Future<Item = crate::models::BtFeatureScriptEvalResponse, Error = Error<serde_json::Value>>>;
    fn export_ps1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, part_ids: Option<&str>, version: Option<&str>, include_export_ids: Option<bool>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn export_stl1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, part_ids: Option<&str>, mode: Option<&str>, grouping: Option<bool>, scale: Option<f64>, units: Option<&str>, angle_tolerance: Option<f64>, chord_tolerance: Option<f64>, max_facet_width: Option<f64>, min_facet_width: Option<f64>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_body_details2(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtExportModelBodiesResponse, Error = Error<serde_json::Value>>>;
    fn get_bounding_boxes2(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, include_hidden: Option<bool>, include_wire_bodies: Option<bool>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtBoundingBox, Error = Error<serde_json::Value>>>;
    fn get_configuration1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_edges2(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, angle_tolerance: Option<f64>, chord_tolerance: Option<f64>, part_id: Option<Vec<String>>, edge_id: Option<Vec<String>>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtExportTessellatedEdgesResponse, Error = Error<serde_json::Value>>>;
    fn get_faces2(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, angle_tolerance: Option<f64>, chord_tolerance: Option<f64>, max_facet_width: Option<f64>, output_vertex_normals: Option<bool>, output_facet_normals: Option<bool>, output_texture_coordinates: Option<bool>, output_index_table: Option<bool>, part_id: Option<Vec<String>>, face_id: Option<Vec<String>>, output_error_faces: Option<bool>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtExportTessellatedFacesResponse, Error = Error<serde_json::Value>>>;
    fn get_feature_specs1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_features1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, feature_id: Option<Vec<String>>, link_document_id: Option<&str>, no_sketch_geometry: Option<bool>, body: Option<&str>) -> Box<dyn Future<Item = crate::models::BtFeatureListResponse, Error = Error<serde_json::Value>>>;
    fn get_mass_properties1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, part_id: Option<Vec<String>>, mass_as_group: Option<bool>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtMassPropertiesBulkInfo, Error = Error<serde_json::Value>>>;
    fn get_named_views1(&self, did: &str, eid: &str, skip_perspective: Option<bool>) -> Box<dyn Future<Item = crate::models::BtNamedViewsInfo, Error = Error<serde_json::Value>>>;
    fn get_shaded_views2(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, view_matrix: Option<&str>, output_height: Option<i32>, output_width: Option<i32>, pixel_size: Option<f64>, edges: Option<&str>, show_all_parts: Option<bool>, include_surfaces: Option<bool>, use_anti_aliasing: Option<bool>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtShadedRenderDocumentResponse, Error = Error<serde_json::Value>>>;
    fn get_translator_formats4(&self, did: &str, wid: &str, eid: &str, check_content: Option<bool>) -> Box<dyn Future<Item = Vec<crate::models::BtModelFormatInfo>, Error = Error<serde_json::Value>>>;
    fn translate_format5(&self, did: &str, wv: &str, wvid: &str, eid: &str, bt_translate_format_params: crate::models::BtTranslateFormatParams) -> Box<dyn Future<Item = crate::models::BtTranslationRequestInfo, Error = Error<serde_json::Value>>>;
    fn translate_ids(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, bt_id_translation_params: crate::models::BtIdTranslationParams) -> Box<dyn Future<Item = crate::models::BtIdTranslationInfo, Error = Error<serde_json::Value>>>;
    fn update_configuration1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_feature1(&self, did: &str, wid: &str, eid: &str, fid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_features(&self, did: &str, wid: &str, eid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_rollback(&self, did: &str, wid: &str, eid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PartStudiosApi for PartStudiosApiClient<C> {
    fn add_feature1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, body: Option<&str>) -> Box<dyn Future<Item = crate::models::BtFeatureDefinitionResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    fn compare_part_studios(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, workspace_id: Option<&str>, version_id: Option<&str>, microversion_id: Option<&str>, source_configuration: Option<&str>, target_configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtRootDiffInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/compare".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = workspace_id {
            req = req.with_query_param("workspaceId".to_string(), s.to_string());
        }
        if let Some(ref s) = version_id {
            req = req.with_query_param("versionId".to_string(), s.to_string());
        }
        if let Some(ref s) = microversion_id {
            req = req.with_query_param("microversionId".to_string(), s.to_string());
        }
        if let Some(ref s) = source_configuration {
            req = req.with_query_param("sourceConfiguration".to_string(), s.to_string());
        }
        if let Some(ref s) = target_configuration {
            req = req.with_query_param("targetConfiguration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn create_part_studio(&self, did: &str, wid: &str, bt_model_element_params: crate::models::BtModelElementParams) -> Box<dyn Future<Item = crate::models::BtDocumentElementInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/partstudios/d/{did}/w/{wid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_body_param(bt_model_element_params);

        req.execute(self.configuration.borrow())
    }

    fn delete_feature1(&self, did: &str, wid: &str, eid: &str, fid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/api/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_path_param("fid".to_string(), fid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn eval_feature_script(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, configuration: Option<&str>, bt_feature_script_eval_call: Option<crate::models::BtFeatureScriptEvalCall>) -> Box<dyn Future<Item = crate::models::BtFeatureScriptEvalResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurescript".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(bt_feature_script_eval_call);

        req.execute(self.configuration.borrow())
    }

    fn export_ps1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, part_ids: Option<&str>, version: Option<&str>, include_export_ids: Option<bool>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/parasolid".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = part_ids {
            req = req.with_query_param("partIds".to_string(), s.to_string());
        }
        if let Some(ref s) = version {
            req = req.with_query_param("version".to_string(), s.to_string());
        }
        if let Some(ref s) = include_export_ids {
            req = req.with_query_param("includeExportIds".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn export_stl1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, part_ids: Option<&str>, mode: Option<&str>, grouping: Option<bool>, scale: Option<f64>, units: Option<&str>, angle_tolerance: Option<f64>, chord_tolerance: Option<f64>, max_facet_width: Option<f64>, min_facet_width: Option<f64>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/stl".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = part_ids {
            req = req.with_query_param("partIds".to_string(), s.to_string());
        }
        if let Some(ref s) = mode {
            req = req.with_query_param("mode".to_string(), s.to_string());
        }
        if let Some(ref s) = grouping {
            req = req.with_query_param("grouping".to_string(), s.to_string());
        }
        if let Some(ref s) = scale {
            req = req.with_query_param("scale".to_string(), s.to_string());
        }
        if let Some(ref s) = units {
            req = req.with_query_param("units".to_string(), s.to_string());
        }
        if let Some(ref s) = angle_tolerance {
            req = req.with_query_param("angleTolerance".to_string(), s.to_string());
        }
        if let Some(ref s) = chord_tolerance {
            req = req.with_query_param("chordTolerance".to_string(), s.to_string());
        }
        if let Some(ref s) = max_facet_width {
            req = req.with_query_param("maxFacetWidth".to_string(), s.to_string());
        }
        if let Some(ref s) = min_facet_width {
            req = req.with_query_param("minFacetWidth".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_body_details2(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtExportModelBodiesResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/bodydetails".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_bounding_boxes2(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, include_hidden: Option<bool>, include_wire_bodies: Option<bool>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtBoundingBox, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/boundingboxes".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = include_hidden {
            req = req.with_query_param("includeHidden".to_string(), s.to_string());
        }
        if let Some(ref s) = include_wire_bodies {
            req = req.with_query_param("includeWireBodies".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_configuration1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_edges2(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, angle_tolerance: Option<f64>, chord_tolerance: Option<f64>, part_id: Option<Vec<String>>, edge_id: Option<Vec<String>>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtExportTessellatedEdgesResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/tessellatededges".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = angle_tolerance {
            req = req.with_query_param("angleTolerance".to_string(), s.to_string());
        }
        if let Some(ref s) = chord_tolerance {
            req = req.with_query_param("chordTolerance".to_string(), s.to_string());
        }
        if let Some(ref s) = part_id {
            req = req.with_query_param("partId".to_string(), s.join(",").to_string());
        }
        if let Some(ref s) = edge_id {
            req = req.with_query_param("edgeId".to_string(), s.join(",").to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_faces2(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, angle_tolerance: Option<f64>, chord_tolerance: Option<f64>, max_facet_width: Option<f64>, output_vertex_normals: Option<bool>, output_facet_normals: Option<bool>, output_texture_coordinates: Option<bool>, output_index_table: Option<bool>, part_id: Option<Vec<String>>, face_id: Option<Vec<String>>, output_error_faces: Option<bool>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtExportTessellatedFacesResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/tessellatedfaces".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = angle_tolerance {
            req = req.with_query_param("angleTolerance".to_string(), s.to_string());
        }
        if let Some(ref s) = chord_tolerance {
            req = req.with_query_param("chordTolerance".to_string(), s.to_string());
        }
        if let Some(ref s) = max_facet_width {
            req = req.with_query_param("maxFacetWidth".to_string(), s.to_string());
        }
        if let Some(ref s) = output_vertex_normals {
            req = req.with_query_param("outputVertexNormals".to_string(), s.to_string());
        }
        if let Some(ref s) = output_facet_normals {
            req = req.with_query_param("outputFacetNormals".to_string(), s.to_string());
        }
        if let Some(ref s) = output_texture_coordinates {
            req = req.with_query_param("outputTextureCoordinates".to_string(), s.to_string());
        }
        if let Some(ref s) = output_index_table {
            req = req.with_query_param("outputIndexTable".to_string(), s.to_string());
        }
        if let Some(ref s) = part_id {
            req = req.with_query_param("partId".to_string(), s.join(",").to_string());
        }
        if let Some(ref s) = face_id {
            req = req.with_query_param("faceId".to_string(), s.join(",").to_string());
        }
        if let Some(ref s) = output_error_faces {
            req = req.with_query_param("outputErrorFaces".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_feature_specs1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_features1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, feature_id: Option<Vec<String>>, link_document_id: Option<&str>, no_sketch_geometry: Option<bool>, body: Option<&str>) -> Box<dyn Future<Item = crate::models::BtFeatureListResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = feature_id {
            req = req.with_query_param("featureId".to_string(), s.join(",").to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        if let Some(ref s) = no_sketch_geometry {
            req = req.with_query_param("noSketchGeometry".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    fn get_mass_properties1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, part_id: Option<Vec<String>>, mass_as_group: Option<bool>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtMassPropertiesBulkInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/massproperties".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = part_id {
            req = req.with_query_param("partId".to_string(), s.join(",").to_string());
        }
        if let Some(ref s) = mass_as_group {
            req = req.with_query_param("massAsGroup".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_named_views1(&self, did: &str, eid: &str, skip_perspective: Option<bool>) -> Box<dyn Future<Item = crate::models::BtNamedViewsInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/e/{eid}/namedViews".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = skip_perspective {
            req = req.with_query_param("skipPerspective".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_shaded_views2(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, view_matrix: Option<&str>, output_height: Option<i32>, output_width: Option<i32>, pixel_size: Option<f64>, edges: Option<&str>, show_all_parts: Option<bool>, include_surfaces: Option<bool>, use_anti_aliasing: Option<bool>, configuration: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = crate::models::BtShadedRenderDocumentResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/shadedviews".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = view_matrix {
            req = req.with_query_param("viewMatrix".to_string(), s.to_string());
        }
        if let Some(ref s) = output_height {
            req = req.with_query_param("outputHeight".to_string(), s.to_string());
        }
        if let Some(ref s) = output_width {
            req = req.with_query_param("outputWidth".to_string(), s.to_string());
        }
        if let Some(ref s) = pixel_size {
            req = req.with_query_param("pixelSize".to_string(), s.to_string());
        }
        if let Some(ref s) = edges {
            req = req.with_query_param("edges".to_string(), s.to_string());
        }
        if let Some(ref s) = show_all_parts {
            req = req.with_query_param("showAllParts".to_string(), s.to_string());
        }
        if let Some(ref s) = include_surfaces {
            req = req.with_query_param("includeSurfaces".to_string(), s.to_string());
        }
        if let Some(ref s) = use_anti_aliasing {
            req = req.with_query_param("useAntiAliasing".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_translator_formats4(&self, did: &str, wid: &str, eid: &str, check_content: Option<bool>) -> Box<dyn Future<Item = Vec<crate::models::BtModelFormatInfo>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/partstudios/d/{did}/w/{wid}/e/{eid}/translationformats".to_string())
        ;
        if let Some(ref s) = check_content {
            req = req.with_query_param("checkContent".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn translate_format5(&self, did: &str, wv: &str, wvid: &str, eid: &str, bt_translate_format_params: crate::models::BtTranslateFormatParams) -> Box<dyn Future<Item = crate::models::BtTranslationRequestInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/translations".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wv".to_string(), wv.to_string());
        req = req.with_path_param("wvid".to_string(), wvid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(bt_translate_format_params);

        req.execute(self.configuration.borrow())
    }

    fn translate_ids(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, bt_id_translation_params: crate::models::BtIdTranslationParams) -> Box<dyn Future<Item = crate::models::BtIdTranslationInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/idtranslations".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(bt_id_translation_params);

        req.execute(self.configuration.borrow())
    }

    fn update_configuration1(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn update_feature1(&self, did: &str, wid: &str, eid: &str, fid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_path_param("fid".to_string(), fid.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn update_features(&self, did: &str, wid: &str, eid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/partstudios/d/{did}/w/{wid}/e/{eid}/features/updates".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn update_rollback(&self, did: &str, wid: &str, eid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/partstudios/d/{did}/w/{wid}/e/{eid}/features/rollback".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
