/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct OpenAPIApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> OpenAPIApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> OpenAPIApiClient<C> {
        OpenAPIApiClient {
            configuration,
        }
    }
}

pub trait OpenAPIApi {
    fn get_open_api(&self, file_type: Option<&str>, excluded_tags: Option<&str>, included_tags: Option<&str>, include_deprecated: Option<bool>, documentation_status: Option<Vec<String>>) -> Box<dyn Future<Item = crate::models::OpenApi, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>OpenAPIApi for OpenAPIApiClient<C> {
    fn get_open_api(&self, file_type: Option<&str>, excluded_tags: Option<&str>, included_tags: Option<&str>, include_deprecated: Option<bool>, documentation_status: Option<Vec<String>>) -> Box<dyn Future<Item = crate::models::OpenApi, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/openapi".to_string())
        ;
        if let Some(ref s) = file_type {
            req = req.with_query_param("fileType".to_string(), s.to_string());
        }
        if let Some(ref s) = excluded_tags {
            req = req.with_query_param("excludedTags".to_string(), s.to_string());
        }
        if let Some(ref s) = included_tags {
            req = req.with_query_param("includedTags".to_string(), s.to_string());
        }
        if let Some(ref s) = include_deprecated {
            req = req.with_query_param("includeDeprecated".to_string(), s.to_string());
        }
        if let Some(ref s) = documentation_status {
            req = req.with_query_param("documentationStatus".to_string(), s.join(",").to_string());
        }

        req.execute(self.configuration.borrow())
    }

}
