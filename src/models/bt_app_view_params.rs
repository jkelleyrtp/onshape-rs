/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtAppViewParams {
    #[serde(rename = "transactionId", skip_serializing_if = "Option::is_none")]
    pub transaction_id: Option<String>,
    #[serde(rename = "parentChangeId", skip_serializing_if = "Option::is_none")]
    pub parent_change_id: Option<String>,
    #[serde(rename = "displayStateId", skip_serializing_if = "Option::is_none")]
    pub display_state_id: Option<String>,
    #[serde(rename = "modelReferenceId", skip_serializing_if = "Option::is_none")]
    pub model_reference_id: Option<String>,
    #[serde(rename = "viewMatrix", skip_serializing_if = "Option::is_none")]
    pub view_matrix: Option<Vec<f64>>,
    #[serde(rename = "viewDirection", skip_serializing_if = "Option::is_none")]
    pub view_direction: Option<Vec<f64>>,
    #[serde(rename = "cutPoint", skip_serializing_if = "Option::is_none")]
    pub cut_point: Option<Vec<f64>>,
    #[serde(rename = "offsetSectionPoints", skip_serializing_if = "Option::is_none")]
    pub offset_section_points: Option<Vec<f64>>,
    #[serde(rename = "brokenOutSection", skip_serializing_if = "Option::is_none")]
    pub broken_out_section: Option<bool>,
    #[serde(rename = "cropView", skip_serializing_if = "Option::is_none")]
    pub crop_view: Option<bool>,
    #[serde(rename = "bomReferenceId", skip_serializing_if = "Option::is_none")]
    pub bom_reference_id: Option<String>,
    #[serde(rename = "includeHiddenInstances", skip_serializing_if = "Option::is_none")]
    pub include_hidden_instances: Option<bool>,
    #[serde(rename = "viewScale", skip_serializing_if = "Option::is_none")]
    pub view_scale: Option<f64>,
    #[serde(rename = "showTangentLines", skip_serializing_if = "Option::is_none")]
    pub show_tangent_lines: Option<bool>,
    #[serde(rename = "computeIntersection", skip_serializing_if = "Option::is_none")]
    pub compute_intersection: Option<bool>,
    #[serde(rename = "qualityOption", skip_serializing_if = "Option::is_none")]
    pub quality_option: Option<i32>,
    #[serde(rename = "simplificationOption", skip_serializing_if = "Option::is_none")]
    pub simplification_option: Option<i32>,
    #[serde(rename = "simplificationThreshold", skip_serializing_if = "Option::is_none")]
    pub simplification_threshold: Option<f64>,
    #[serde(rename = "isBrokenOutSection", skip_serializing_if = "Option::is_none")]
    pub is_broken_out_section: Option<bool>,
    #[serde(rename = "isCropView", skip_serializing_if = "Option::is_none")]
    pub is_crop_view: Option<bool>,
    #[serde(rename = "showCutGeomOnly", skip_serializing_if = "Option::is_none")]
    pub show_cut_geom_only: Option<bool>,
    #[serde(rename = "hiddenLines", skip_serializing_if = "Option::is_none")]
    pub hidden_lines: Option<HiddenLines>,
    #[serde(rename = "modificationId", skip_serializing_if = "Option::is_none")]
    pub modification_id: Option<String>,
    #[serde(rename = "perspective", skip_serializing_if = "Option::is_none")]
    pub perspective: Option<bool>,
    #[serde(rename = "projectionAngle", skip_serializing_if = "Option::is_none")]
    pub projection_angle: Option<String>,
    #[serde(rename = "showThreads", skip_serializing_if = "Option::is_none")]
    pub show_threads: Option<bool>,
    #[serde(rename = "qualityOptionType", skip_serializing_if = "Option::is_none")]
    pub quality_option_type: Option<QualityOptionType>,
    #[serde(rename = "simplificationOptionType", skip_serializing_if = "Option::is_none")]
    pub simplification_option_type: Option<SimplificationOptionType>,
    #[serde(rename = "isPartialSection", skip_serializing_if = "Option::is_none")]
    pub is_partial_section: Option<bool>,
    #[serde(rename = "brokenOutPointNumbers", skip_serializing_if = "Option::is_none")]
    pub broken_out_point_numbers: Option<Vec<i32>>,
    #[serde(rename = "brokenOutEndConditions", skip_serializing_if = "Option::is_none")]
    pub broken_out_end_conditions: Option<::std::collections::HashMap<String, crate::models::BtBrokenOutEndCondition>>,
    #[serde(rename = "brokenOutBBoxes", skip_serializing_if = "Option::is_none")]
    pub broken_out_b_boxes: Option<Vec<f64>>,
    #[serde(rename = "brokenOutBBoxesMap", skip_serializing_if = "Option::is_none")]
    pub broken_out_b_boxes_map: Option<::std::collections::HashMap<String, crate::models::BtBoundingBox>>,
    #[serde(rename = "includeSurfaces", skip_serializing_if = "Option::is_none")]
    pub include_surfaces: Option<bool>,
    #[serde(rename = "isSurface", skip_serializing_if = "Option::is_none")]
    pub is_surface: Option<bool>,
    #[serde(rename = "depthSectionEndCondition", skip_serializing_if = "Option::is_none")]
    pub depth_section_end_condition: Option<crate::models::BtBrokenOutEndCondition>,
    #[serde(rename = "explodedViewId", skip_serializing_if = "Option::is_none")]
    pub exploded_view_id: Option<String>,
    #[serde(rename = "occurrenceOrPartIdToGeometryProperties", skip_serializing_if = "Option::is_none")]
    pub occurrence_or_part_id_to_geometry_properties: Option<::std::collections::HashMap<String, ::std::collections::HashMap<String, String>>>,
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<f64>>,
}

impl BtAppViewParams {
    pub fn new() -> BtAppViewParams {
        BtAppViewParams {
            transaction_id: None,
            parent_change_id: None,
            display_state_id: None,
            model_reference_id: None,
            view_matrix: None,
            view_direction: None,
            cut_point: None,
            offset_section_points: None,
            broken_out_section: None,
            crop_view: None,
            bom_reference_id: None,
            include_hidden_instances: None,
            view_scale: None,
            show_tangent_lines: None,
            compute_intersection: None,
            quality_option: None,
            simplification_option: None,
            simplification_threshold: None,
            is_broken_out_section: None,
            is_crop_view: None,
            show_cut_geom_only: None,
            hidden_lines: None,
            modification_id: None,
            perspective: None,
            projection_angle: None,
            show_threads: None,
            quality_option_type: None,
            simplification_option_type: None,
            is_partial_section: None,
            broken_out_point_numbers: None,
            broken_out_end_conditions: None,
            broken_out_b_boxes: None,
            broken_out_b_boxes_map: None,
            include_surfaces: None,
            is_surface: None,
            depth_section_end_condition: None,
            exploded_view_id: None,
            occurrence_or_part_id_to_geometry_properties: None,
            parameters: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HiddenLines {
    #[serde(rename = "DRAFTING")]
    DRAFTING,
    #[serde(rename = "EXCLUDED")]
    EXCLUDED,
    #[serde(rename = "MARKED")]
    MARKED,
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum QualityOptionType {
    #[serde(rename = "BEST_PERFORMANCE")]
    BESTPERFORMANCE,
    #[serde(rename = "BEST_QUALITY")]
    BESTQUALITY,
    #[serde(rename = "BALANCED")]
    BALANCED,
    #[serde(rename = "ADAPTIVE")]
    ADAPTIVE,
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SimplificationOptionType {
    #[serde(rename = "NONE")]
    NONE,
    #[serde(rename = "ABSOLUTE")]
    ABSOLUTE,
    #[serde(rename = "RATIO_TO_MODEL")]
    RATIOTOMODEL,
    #[serde(rename = "RATIO_TO_BODY")]
    RATIOTOBODY,
}

