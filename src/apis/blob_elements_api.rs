/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct BlobElementsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> BlobElementsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> BlobElementsApiClient<C> {
        BlobElementsApiClient {
            configuration,
        }
    }
}

pub trait BlobElementsApi {
    fn download_file_workspace(&self, did: &str, wid: &str, eid: &str, content_disposition: Option<&str>, if_none_match: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn upload_file_create_element(&self, did: &str, wid: &str, content_disposition: Option<crate::models::crate::models::ContentDisposition>, entity: Option<crate::models::serde_json::Value>, media_type: Option<crate::models::crate::models::BodyPartMediaType>, message_body_workers: Option<crate::models::serde_json::Value>, parent: Option<crate::models::crate::models::MultiPart>, providers: Option<crate::models::serde_json::Value>, body_parts: Option<Vec<crate::models::BodyPart>>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>BlobElementsApi for BlobElementsApiClient<C> {
    fn download_file_workspace(&self, did: &str, wid: &str, eid: &str, content_disposition: Option<&str>, if_none_match: Option<&str>, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/blobelements/d/{did}/w/{wid}/e/{eid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = content_disposition {
            req = req.with_query_param("contentDisposition".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        if let Some(param_value) = if_none_match {
            req = req.with_header_param("If-None-Match".to_string(), param_value.to_string());
        }
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn upload_file_create_element(&self, did: &str, wid: &str, content_disposition: Option<crate::models::crate::models::ContentDisposition>, entity: Option<crate::models::serde_json::Value>, media_type: Option<crate::models::crate::models::BodyPartMediaType>, message_body_workers: Option<crate::models::serde_json::Value>, parent: Option<crate::models::crate::models::MultiPart>, providers: Option<crate::models::serde_json::Value>, body_parts: Option<Vec<crate::models::BodyPart>>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/blobelements/d/{did}/w/{wid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        if let Some(param_value) = content_disposition {
            req = req.with_form_param("contentDisposition".to_string(), param_value.to_string());
        }
        if let Some(param_value) = entity {
            req = req.with_form_param("entity".to_string(), param_value.to_string());
        }
        if let Some(param_value) = media_type {
            req = req.with_form_param("mediaType".to_string(), param_value.to_string());
        }
        if let Some(param_value) = message_body_workers {
            req = req.with_form_param("messageBodyWorkers".to_string(), param_value.to_string());
        }
        if let Some(param_value) = parent {
            req = req.with_form_param("parent".to_string(), param_value.to_string());
        }
        if let Some(param_value) = providers {
            req = req.with_form_param("providers".to_string(), param_value.to_string());
        }
        if let Some(param_value) = body_parts {
            req = req.with_form_param("bodyParts".to_string(), param_value.join(",").to_string());
        }
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
