/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtOccurrence {
    #[serde(rename = "rootOccurrence", skip_serializing_if = "Option::is_none")]
    pub root_occurrence: Option<bool>,
    #[serde(rename = "fullPathAsString", skip_serializing_if = "Option::is_none")]
    pub full_path_as_string: Option<String>,
    #[serde(rename = "tailInstanceId", skip_serializing_if = "Option::is_none")]
    pub tail_instance_id: Option<String>,
    #[serde(rename = "headInstanceId", skip_serializing_if = "Option::is_none")]
    pub head_instance_id: Option<String>,
    #[serde(rename = "occurrenceWithoutHead", skip_serializing_if = "Option::is_none")]
    pub occurrence_without_head: Option<crate::models::BtOccurrence>,
    #[serde(rename = "occurrenceWithoutTail", skip_serializing_if = "Option::is_none")]
    pub occurrence_without_tail: Option<crate::models::BtOccurrence>,
    #[serde(rename = "patternDescendant", skip_serializing_if = "Option::is_none")]
    pub pattern_descendant: Option<bool>,
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<String>>,
}

impl BtOccurrence {
    pub fn new() -> BtOccurrence {
        BtOccurrence {
            root_occurrence: None,
            full_path_as_string: None,
            tail_instance_id: None,
            head_instance_id: None,
            occurrence_without_head: None,
            occurrence_without_tail: None,
            pattern_descendant: None,
            path: None,
        }
    }
}


