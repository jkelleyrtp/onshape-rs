/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtAclEntryInfo {
    #[serde(rename = "entryType", skip_serializing_if = "Option::is_none")]
    pub entry_type: Option<i32>,
    #[serde(rename = "entryId", skip_serializing_if = "Option::is_none")]
    pub entry_id: Option<String>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "permissionSet", skip_serializing_if = "Option::is_none")]
    pub permission_set: Option<serde_json::Value>,
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(rename = "entryState", skip_serializing_if = "Option::is_none")]
    pub entry_state: Option<EntryState>,
    #[serde(rename = "enterpriseMember", skip_serializing_if = "Option::is_none")]
    pub enterprise_member: Option<bool>,
    #[serde(rename = "pendingOwnerTransfer", skip_serializing_if = "Option::is_none")]
    pub pending_owner_transfer: Option<bool>,
    #[serde(rename = "acceptOwnerTransfer", skip_serializing_if = "Option::is_none")]
    pub accept_owner_transfer: Option<bool>,
    #[serde(rename = "objectId", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    #[serde(rename = "teamName", skip_serializing_if = "Option::is_none")]
    pub team_name: Option<String>,
    #[serde(rename = "companyName", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "permission", skip_serializing_if = "Option::is_none")]
    pub permission: Option<i64>,
}

impl BtAclEntryInfo {
    pub fn new() -> BtAclEntryInfo {
        BtAclEntryInfo {
            entry_type: None,
            entry_id: None,
            email: None,
            permission_set: None,
            image: None,
            entry_state: None,
            enterprise_member: None,
            pending_owner_transfer: None,
            accept_owner_transfer: None,
            object_id: None,
            team_name: None,
            company_name: None,
            name: None,
            permission: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EntryState {
    #[serde(rename = "DELETED")]
    DELETED,
    #[serde(rename = "ACTIVE")]
    ACTIVE,
    #[serde(rename = "INACTIVE")]
    INACTIVE,
    #[serde(rename = "REQUESTED")]
    REQUESTED,
    #[serde(rename = "APPROVED")]
    APPROVED,
    #[serde(rename = "REQUEST_EXPIRED")]
    REQUESTEXPIRED,
    #[serde(rename = "ALL")]
    ALL,
    #[serde(rename = "MARKED_FOR_DELETION")]
    MARKEDFORDELETION,
}

