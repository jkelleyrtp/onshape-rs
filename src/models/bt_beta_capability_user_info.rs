/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtBetaCapabilityUserInfo {
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "planId", skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
    #[serde(rename = "approvedAt", skip_serializing_if = "Option::is_none")]
    pub approved_at: Option<String>,
    #[serde(rename = "removedAt", skip_serializing_if = "Option::is_none")]
    pub removed_at: Option<String>,
    #[serde(rename = "capabilityState", skip_serializing_if = "Option::is_none")]
    pub capability_state: Option<i32>,
    #[serde(rename = "isGuest", skip_serializing_if = "Option::is_none")]
    pub is_guest: Option<bool>,
    #[serde(rename = "isLight", skip_serializing_if = "Option::is_none")]
    pub is_light: Option<bool>,
    #[serde(rename = "globalPermissions", skip_serializing_if = "Option::is_none")]
    pub global_permissions: Option<crate::models::GlobalPermissionInfo>,
    #[serde(rename = "firstName", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "lastName", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "company", skip_serializing_if = "Option::is_none")]
    pub company: Option<crate::models::BtCompanySummaryInfo>,
    #[serde(rename = "lastLoginTime", skip_serializing_if = "Option::is_none")]
    pub last_login_time: Option<String>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<i32>,
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<i32>,
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "viewRef", skip_serializing_if = "Option::is_none")]
    pub view_ref: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

impl BtBetaCapabilityUserInfo {
    pub fn new() -> BtBetaCapabilityUserInfo {
        BtBetaCapabilityUserInfo {
            created_at: None,
            plan_id: None,
            approved_at: None,
            removed_at: None,
            capability_state: None,
            is_guest: None,
            is_light: None,
            global_permissions: None,
            first_name: None,
            last_name: None,
            email: None,
            company: None,
            last_login_time: None,
            source: None,
            image: None,
            state: None,
            href: None,
            view_ref: None,
            name: None,
            id: None,
        }
    }
}


