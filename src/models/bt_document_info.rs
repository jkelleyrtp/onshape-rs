/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtDocumentInfo {
    #[serde(rename = "treeHref", skip_serializing_if = "Option::is_none")]
    pub tree_href: Option<String>,
    #[serde(rename = "isMutable", skip_serializing_if = "Option::is_none")]
    pub is_mutable: Option<bool>,
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "modifiedAt", skip_serializing_if = "Option::is_none")]
    pub modified_at: Option<String>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<crate::models::BtUserBasicSummaryInfo>,
    #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<crate::models::BtUserBasicSummaryInfo>,
    #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(rename = "canMove", skip_serializing_if = "Option::is_none")]
    pub can_move: Option<bool>,
    #[serde(rename = "isContainer", skip_serializing_if = "Option::is_none")]
    pub is_container: Option<bool>,
    #[serde(rename = "isEnterpriseOwned", skip_serializing_if = "Option::is_none")]
    pub is_enterprise_owned: Option<bool>,
    #[serde(rename = "hasPendingOwner", skip_serializing_if = "Option::is_none")]
    pub has_pending_owner: Option<bool>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<crate::models::BtOwnerInfo>,
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "viewRef", skip_serializing_if = "Option::is_none")]
    pub view_ref: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "defaultElementId", skip_serializing_if = "Option::is_none")]
    pub default_element_id: Option<String>,
    #[serde(rename = "defaultWorkspace", skip_serializing_if = "Option::is_none")]
    pub default_workspace: Option<crate::models::BtBaseInfo>,
    #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    #[serde(rename = "permissionSet", skip_serializing_if = "Option::is_none")]
    pub permission_set: Option<serde_json::Value>,
    #[serde(rename = "trash", skip_serializing_if = "Option::is_none")]
    pub trash: Option<bool>,
    #[serde(rename = "totalWorkspacesUpdating", skip_serializing_if = "Option::is_none")]
    pub total_workspaces_updating: Option<i32>,
    #[serde(rename = "totalWorkspacesScheduledForUpdate", skip_serializing_if = "Option::is_none")]
    pub total_workspaces_scheduled_for_update: Option<i32>,
    #[serde(rename = "canUnshare", skip_serializing_if = "Option::is_none")]
    pub can_unshare: Option<bool>,
    #[serde(rename = "thumbnail", skip_serializing_if = "Option::is_none")]
    pub thumbnail: Option<crate::models::BtThumbnailInfo>,
    #[serde(rename = "supportTeamUserAndShared", skip_serializing_if = "Option::is_none")]
    pub support_team_user_and_shared: Option<bool>,
    #[serde(rename = "likedByCurrentUser", skip_serializing_if = "Option::is_none")]
    pub liked_by_current_user: Option<bool>,
    #[serde(rename = "documentLabels", skip_serializing_if = "Option::is_none")]
    pub document_labels: Option<Vec<crate::models::BtDocumentLabelInfo>>,
    #[serde(rename = "numberOfTimesReferenced", skip_serializing_if = "Option::is_none")]
    pub number_of_times_referenced: Option<i64>,
    #[serde(rename = "numberOfTimesCopied", skip_serializing_if = "Option::is_none")]
    pub number_of_times_copied: Option<i64>,
    #[serde(rename = "likes", skip_serializing_if = "Option::is_none")]
    pub likes: Option<i64>,
    #[serde(rename = "recentVersion", skip_serializing_if = "Option::is_none")]
    pub recent_version: Option<crate::models::BtBaseInfo>,
    #[serde(rename = "hasRelevantInsertables", skip_serializing_if = "Option::is_none")]
    pub has_relevant_insertables: Option<bool>,
    #[serde(rename = "createdWithEducationPlan", skip_serializing_if = "Option::is_none")]
    pub created_with_education_plan: Option<bool>,
    #[serde(rename = "notRevisionManaged", skip_serializing_if = "Option::is_none")]
    pub not_revision_managed: Option<bool>,
    #[serde(rename = "anonymousAccessAllowed", skip_serializing_if = "Option::is_none")]
    pub anonymous_access_allowed: Option<bool>,
    #[serde(rename = "anonymousAllowsExport", skip_serializing_if = "Option::is_none")]
    pub anonymous_allows_export: Option<bool>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "trashedAt", skip_serializing_if = "Option::is_none")]
    pub trashed_at: Option<String>,
    #[serde(rename = "isOrphaned", skip_serializing_if = "Option::is_none")]
    pub is_orphaned: Option<bool>,
    #[serde(rename = "public", skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    #[serde(rename = "userAccountLimitsBreached", skip_serializing_if = "Option::is_none")]
    pub user_account_limits_breached: Option<bool>,
    #[serde(rename = "isUsingManagedWorkflow", skip_serializing_if = "Option::is_none")]
    pub is_using_managed_workflow: Option<bool>,
    #[serde(rename = "permission", skip_serializing_if = "Option::is_none")]
    pub permission: Option<Permission>,
    #[serde(rename = "hasReleaseRevisionableObjects", skip_serializing_if = "Option::is_none")]
    pub has_release_revisionable_objects: Option<bool>,
    #[serde(rename = "documentThumbnailElementId", skip_serializing_if = "Option::is_none")]
    pub document_thumbnail_element_id: Option<String>,
    #[serde(rename = "duplicateNameViolationError", skip_serializing_if = "Option::is_none")]
    pub duplicate_name_violation_error: Option<String>,
    #[serde(rename = "betaCapabilityIds", skip_serializing_if = "Option::is_none")]
    pub beta_capability_ids: Option<Vec<String>>,
    #[serde(rename = "isUpgradedToLatestVersion", skip_serializing_if = "Option::is_none")]
    pub is_upgraded_to_latest_version: Option<bool>,
}

impl BtDocumentInfo {
    pub fn new(json_type: String) -> BtDocumentInfo {
        BtDocumentInfo {
            tree_href: None,
            is_mutable: None,
            resource_type: None,
            description: None,
            modified_at: None,
            created_at: None,
            created_by: None,
            modified_by: None,
            project_id: None,
            can_move: None,
            is_container: None,
            is_enterprise_owned: None,
            has_pending_owner: None,
            owner: None,
            href: None,
            view_ref: None,
            name: None,
            id: None,
            default_element_id: None,
            default_workspace: None,
            parent_id: None,
            permission_set: None,
            trash: None,
            total_workspaces_updating: None,
            total_workspaces_scheduled_for_update: None,
            can_unshare: None,
            thumbnail: None,
            support_team_user_and_shared: None,
            liked_by_current_user: None,
            document_labels: None,
            number_of_times_referenced: None,
            number_of_times_copied: None,
            likes: None,
            recent_version: None,
            has_relevant_insertables: None,
            created_with_education_plan: None,
            not_revision_managed: None,
            anonymous_access_allowed: None,
            anonymous_allows_export: None,
            tags: None,
            trashed_at: None,
            is_orphaned: None,
            public: None,
            user_account_limits_breached: None,
            is_using_managed_workflow: None,
            permission: None,
            has_release_revisionable_objects: None,
            document_thumbnail_element_id: None,
            duplicate_name_violation_error: None,
            beta_capability_ids: None,
            is_upgraded_to_latest_version: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Permission {
    #[serde(rename = "NOACCESS")]
    NOACCESS,
    #[serde(rename = "ANONYMOUS_ACCESS")]
    ANONYMOUSACCESS,
    #[serde(rename = "READ")]
    READ,
    #[serde(rename = "READ_COPY_EXPORT")]
    READCOPYEXPORT,
    #[serde(rename = "COMMENT")]
    COMMENT,
    #[serde(rename = "WRITE")]
    WRITE,
    #[serde(rename = "RESHARE")]
    RESHARE,
    #[serde(rename = "FULL")]
    FULL,
    #[serde(rename = "OWNER")]
    OWNER,
}

