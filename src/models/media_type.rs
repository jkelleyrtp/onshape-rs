/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MediaType {
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<crate::models::Schema>,
    #[serde(rename = "examples", skip_serializing_if = "Option::is_none")]
    pub examples: Option<::std::collections::HashMap<String, crate::models::Example>>,
    #[serde(rename = "example", skip_serializing_if = "Option::is_none")]
    pub example: Option<serde_json::Value>,
    #[serde(rename = "encoding", skip_serializing_if = "Option::is_none")]
    pub encoding: Option<::std::collections::HashMap<String, crate::models::Encoding>>,
    #[serde(rename = "extensions", skip_serializing_if = "Option::is_none")]
    pub extensions: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl MediaType {
    pub fn new() -> MediaType {
        MediaType {
            schema: None,
            examples: None,
            example: None,
            encoding: None,
            extensions: None,
        }
    }
}


