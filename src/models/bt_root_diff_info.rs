/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtRootDiffInfo {
    #[serde(rename = "sourceWorkspaceId", skip_serializing_if = "Option::is_none")]
    pub source_workspace_id: Option<String>,
    #[serde(rename = "sourceConfiguration", skip_serializing_if = "Option::is_none")]
    pub source_configuration: Option<String>,
    #[serde(rename = "targetConfiguration", skip_serializing_if = "Option::is_none")]
    pub target_configuration: Option<String>,
    #[serde(rename = "sourceMicroversionId", skip_serializing_if = "Option::is_none")]
    pub source_microversion_id: Option<String>,
    #[serde(rename = "sourceVersionId", skip_serializing_if = "Option::is_none")]
    pub source_version_id: Option<String>,
    #[serde(rename = "targetMicroversionId", skip_serializing_if = "Option::is_none")]
    pub target_microversion_id: Option<String>,
    #[serde(rename = "targetWorkspaceId", skip_serializing_if = "Option::is_none")]
    pub target_workspace_id: Option<String>,
    #[serde(rename = "targetVersionId", skip_serializing_if = "Option::is_none")]
    pub target_version_id: Option<String>,
    #[serde(rename = "sourceId", skip_serializing_if = "Option::is_none")]
    pub source_id: Option<String>,
    #[serde(rename = "changes", skip_serializing_if = "Option::is_none")]
    pub changes: Option<::std::collections::HashMap<String, crate::models::BtDiffInfo>>,
    #[serde(rename = "collectionChanges", skip_serializing_if = "Option::is_none")]
    pub collection_changes: Option<::std::collections::HashMap<String, Vec<crate::models::BtDiffInfo>>>,
    #[serde(rename = "geometryChangeMessages", skip_serializing_if = "Option::is_none")]
    pub geometry_change_messages: Option<Vec<String>>,
    #[serde(rename = "sourceValue", skip_serializing_if = "Option::is_none")]
    pub source_value: Option<String>,
    #[serde(rename = "targetValue", skip_serializing_if = "Option::is_none")]
    pub target_value: Option<String>,
    #[serde(rename = "targetId", skip_serializing_if = "Option::is_none")]
    pub target_id: Option<String>,
    #[serde(rename = "entityType", skip_serializing_if = "Option::is_none")]
    pub entity_type: Option<EntityType>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
}

impl BtRootDiffInfo {
    pub fn new() -> BtRootDiffInfo {
        BtRootDiffInfo {
            source_workspace_id: None,
            source_configuration: None,
            target_configuration: None,
            source_microversion_id: None,
            source_version_id: None,
            target_microversion_id: None,
            target_workspace_id: None,
            target_version_id: None,
            source_id: None,
            changes: None,
            collection_changes: None,
            geometry_change_messages: None,
            source_value: None,
            target_value: None,
            target_id: None,
            entity_type: None,
            _type: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EntityType {
    #[serde(rename = "PARTS")]
    PARTS,
    #[serde(rename = "SKETCHES")]
    SKETCHES,
    #[serde(rename = "POINTS")]
    POINTS,
    #[serde(rename = "MATE_CONNECTORS")]
    MATECONNECTORS,
    #[serde(rename = "PLANES")]
    PLANES,
    #[serde(rename = "CURVES")]
    CURVES,
    #[serde(rename = "SURFACES")]
    SURFACES,
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "NONE")]
    NONE,
    #[serde(rename = "MOVED")]
    MOVED,
    #[serde(rename = "MODIFIED")]
    MODIFIED,
    #[serde(rename = "MOVED_AND_MODIFIED")]
    MOVEDANDMODIFIED,
    #[serde(rename = "ADDED")]
    ADDED,
    #[serde(rename = "DELETED")]
    DELETED,
    #[serde(rename = "UNKNOWN")]
    UNKNOWN,
}

