/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtPartMetadataInfo {
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "thumbnailInfo", skip_serializing_if = "Option::is_none")]
    pub thumbnail_info: Option<crate::models::BtThumbnailInfo>,
    #[serde(rename = "elementId", skip_serializing_if = "Option::is_none")]
    pub element_id: Option<String>,
    #[serde(rename = "microversionId", skip_serializing_if = "Option::is_none")]
    pub microversion_id: Option<String>,
    #[serde(rename = "partNumber", skip_serializing_if = "Option::is_none")]
    pub part_number: Option<String>,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    #[serde(rename = "customProperties", skip_serializing_if = "Option::is_none")]
    pub custom_properties: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "vendor", skip_serializing_if = "Option::is_none")]
    pub vendor: Option<String>,
    #[serde(rename = "productLine", skip_serializing_if = "Option::is_none")]
    pub product_line: Option<String>,
    #[serde(rename = "title1", skip_serializing_if = "Option::is_none")]
    pub title1: Option<String>,
    #[serde(rename = "title2", skip_serializing_if = "Option::is_none")]
    pub title2: Option<String>,
    #[serde(rename = "title3", skip_serializing_if = "Option::is_none")]
    pub title3: Option<String>,
    #[serde(rename = "partQuery", skip_serializing_if = "Option::is_none")]
    pub part_query: Option<String>,
    #[serde(rename = "partId", skip_serializing_if = "Option::is_none")]
    pub part_id: Option<String>,
    #[serde(rename = "unflattenedPartId", skip_serializing_if = "Option::is_none")]
    pub unflattened_part_id: Option<String>,
    #[serde(rename = "configurationId", skip_serializing_if = "Option::is_none")]
    pub configuration_id: Option<String>,
    #[serde(rename = "material", skip_serializing_if = "Option::is_none")]
    pub material: Option<crate::models::BtPartMaterialInfo>,
    #[serde(rename = "thumbnailConfigurationId", skip_serializing_if = "Option::is_none")]
    pub thumbnail_configuration_id: Option<String>,
    #[serde(rename = "appearance", skip_serializing_if = "Option::is_none")]
    pub appearance: Option<crate::models::BtPartAppearanceInfo>,
    #[serde(rename = "customPropertyDefinitions", skip_serializing_if = "Option::is_none")]
    pub custom_property_definitions: Option<::std::collections::HashMap<String, crate::models::BtCustomPropertyDefinitionInfo>>,
    #[serde(rename = "bodyType", skip_serializing_if = "Option::is_none")]
    pub body_type: Option<String>,
    #[serde(rename = "ordinal", skip_serializing_if = "Option::is_none")]
    pub ordinal: Option<i32>,
    #[serde(rename = "isHidden", skip_serializing_if = "Option::is_none")]
    pub is_hidden: Option<bool>,
    #[serde(rename = "referencingConfiguredPartNodeIds", skip_serializing_if = "Option::is_none")]
    pub referencing_configured_part_node_ids: Option<Vec<String>>,
    #[serde(rename = "propertySourceTypes", skip_serializing_if = "Option::is_none")]
    pub property_source_types: Option<::std::collections::HashMap<String, i32>>,
    #[serde(rename = "isFlattenedBody", skip_serializing_if = "Option::is_none")]
    pub is_flattened_body: Option<bool>,
    #[serde(rename = "isMesh", skip_serializing_if = "Option::is_none")]
    pub is_mesh: Option<bool>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
}

impl BtPartMetadataInfo {
    pub fn new() -> BtPartMetadataInfo {
        BtPartMetadataInfo {
            description: None,
            href: None,
            thumbnail_info: None,
            element_id: None,
            microversion_id: None,
            part_number: None,
            project: None,
            revision: None,
            custom_properties: None,
            vendor: None,
            product_line: None,
            title1: None,
            title2: None,
            title3: None,
            part_query: None,
            part_id: None,
            unflattened_part_id: None,
            configuration_id: None,
            material: None,
            thumbnail_configuration_id: None,
            appearance: None,
            custom_property_definitions: None,
            body_type: None,
            ordinal: None,
            is_hidden: None,
            referencing_configured_part_node_ids: None,
            property_source_types: None,
            is_flattened_body: None,
            is_mesh: None,
            name: None,
            id: None,
            state: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "IN_PROGRESS")]
    INPROGRESS,
    #[serde(rename = "PENDING")]
    PENDING,
    #[serde(rename = "RELEASED")]
    RELEASED,
    #[serde(rename = "OBSOLETE")]
    OBSOLETE,
    #[serde(rename = "REJECTED")]
    REJECTED,
    #[serde(rename = "DISCARDED")]
    DISCARDED,
}

