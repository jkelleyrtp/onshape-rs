/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.104
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct AssembliesApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> AssembliesApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> AssembliesApiClient<C> {
        AssembliesApiClient {
            configuration,
        }
    }
}

pub trait AssembliesApi {
    fn add_feature(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn create_assembly(&self, did: &str, wid: &str, bt_model_element_params: crate::models::BtModelElementParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn create_instance(&self, did: &str, wid: &str, eid: &str, bt_assembly_instance_definition_params: crate::models::BtAssemblyInstanceDefinitionParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_feature(&self, did: &str, wid: &str, eid: &str, fid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_instance(&self, did: &str, eid: &str, wid: &str, nid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_assembly_definition(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, link_document_id: Option<&str>, include_mate_features: Option<bool>, include_non_solids: Option<bool>, include_mate_connectors: Option<bool>, configuration: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_bill_of_materials(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, metadata_workspace_id: Option<&str>, bom_column_ids: Option<Vec<String>>, indented: Option<bool>, multi_level: Option<bool>, generate_if_absent: Option<bool>, link_document_id: Option<&str>, configuration: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_bounding_boxes(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, link_document_id: Option<&str>, include_hidden: Option<bool>, display_state_id: Option<&str>, configuration: Option<&str>, exploded_view_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_feature_specs(&self, did: &str, wvm: &str, wvmid: &str, eid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_features(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, feature_id: Option<Vec<String>>, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_named_views(&self, did: &str, eid: &str, skip_perspective: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_or_create_bill_of_materials_element(&self, did: &str, wid: &str, eid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_shaded_views(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, link_document_id: Option<&str>, view_matrix: Option<&str>, output_height: Option<i32>, output_width: Option<i32>, pixel_size: Option<f64>, edges: Option<&str>, show_all_parts: Option<bool>, include_surfaces: Option<bool>, use_anti_aliasing: Option<bool>, display_state_id: Option<&str>, configuration: Option<&str>, exploded_view_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_translator_formats(&self, did: &str, wid: &str, eid: &str, check_content: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn insert_transformed_instances(&self, did: &str, eid: &str, wid: &str, bt_assembly_transformed_instances_definition_params: crate::models::BtAssemblyTransformedInstancesDefinitionParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn transform_occurrences(&self, did: &str, eid: &str, wid: &str, bt_assembly_transform_definition_params: crate::models::BtAssemblyTransformDefinitionParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn translate_format(&self, did: &str, wv: &str, wvid: &str, eid: &str, bt_translate_format_params: crate::models::BtTranslateFormatParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_feature(&self, did: &str, wid: &str, eid: &str, fid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>AssembliesApi for AssembliesApiClient<C> {
    fn add_feature(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/features".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn create_assembly(&self, did: &str, wid: &str, bt_model_element_params: crate::models::BtModelElementParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/assemblies/d/{did}/w/{wid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_body_param(bt_model_element_params);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn create_instance(&self, did: &str, wid: &str, eid: &str, bt_assembly_instance_definition_params: crate::models::BtAssemblyInstanceDefinitionParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/assemblies/d/{did}/w/{wid}/e/{eid}/instances".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(bt_assembly_instance_definition_params);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_feature(&self, did: &str, wid: &str, eid: &str, fid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/api/assemblies/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_path_param("fid".to_string(), fid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_instance(&self, did: &str, eid: &str, wid: &str, nid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/api/assemblies/d/{did}/w/{wid}/e/{eid}/instance/nodeid/{nid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("nid".to_string(), nid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_assembly_definition(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, link_document_id: Option<&str>, include_mate_features: Option<bool>, include_non_solids: Option<bool>, include_mate_connectors: Option<bool>, configuration: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        if let Some(ref s) = include_mate_features {
            req = req.with_query_param("includeMateFeatures".to_string(), s.to_string());
        }
        if let Some(ref s) = include_non_solids {
            req = req.with_query_param("includeNonSolids".to_string(), s.to_string());
        }
        if let Some(ref s) = include_mate_connectors {
            req = req.with_query_param("includeMateConnectors".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_bill_of_materials(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, metadata_workspace_id: Option<&str>, bom_column_ids: Option<Vec<String>>, indented: Option<bool>, multi_level: Option<bool>, generate_if_absent: Option<bool>, link_document_id: Option<&str>, configuration: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/bom".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = metadata_workspace_id {
            req = req.with_query_param("metadataWorkspaceId".to_string(), s.to_string());
        }
        if let Some(ref s) = bom_column_ids {
            req = req.with_query_param("bomColumnIds".to_string(), s.join(",").to_string());
        }
        if let Some(ref s) = indented {
            req = req.with_query_param("indented".to_string(), s.to_string());
        }
        if let Some(ref s) = multi_level {
            req = req.with_query_param("multiLevel".to_string(), s.to_string());
        }
        if let Some(ref s) = generate_if_absent {
            req = req.with_query_param("generateIfAbsent".to_string(), s.to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_bounding_boxes(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, link_document_id: Option<&str>, include_hidden: Option<bool>, display_state_id: Option<&str>, configuration: Option<&str>, exploded_view_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/boundingboxes".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        if let Some(ref s) = include_hidden {
            req = req.with_query_param("includeHidden".to_string(), s.to_string());
        }
        if let Some(ref s) = display_state_id {
            req = req.with_query_param("displayStateId".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = exploded_view_id {
            req = req.with_query_param("explodedViewId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_feature_specs(&self, did: &str, wvm: &str, wvmid: &str, eid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_features(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, feature_id: Option<Vec<String>>, link_document_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/features".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = feature_id {
            req = req.with_query_param("featureId".to_string(), s.join(",").to_string());
        }
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_named_views(&self, did: &str, eid: &str, skip_perspective: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/assemblies/d/{did}/e/{eid}/namedViews".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = skip_perspective {
            req = req.with_query_param("skipPerspective".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_or_create_bill_of_materials_element(&self, did: &str, wid: &str, eid: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/assemblies/d/{did}/w/{wid}/e/{eid}/bomelement".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_shaded_views(&self, did: &str, wvm: &str, wvmid: &str, eid: &str, link_document_id: Option<&str>, view_matrix: Option<&str>, output_height: Option<i32>, output_width: Option<i32>, pixel_size: Option<f64>, edges: Option<&str>, show_all_parts: Option<bool>, include_surfaces: Option<bool>, use_anti_aliasing: Option<bool>, display_state_id: Option<&str>, configuration: Option<&str>, exploded_view_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/shadedviews".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        if let Some(ref s) = link_document_id {
            req = req.with_query_param("linkDocumentId".to_string(), s.to_string());
        }
        if let Some(ref s) = view_matrix {
            req = req.with_query_param("viewMatrix".to_string(), s.to_string());
        }
        if let Some(ref s) = output_height {
            req = req.with_query_param("outputHeight".to_string(), s.to_string());
        }
        if let Some(ref s) = output_width {
            req = req.with_query_param("outputWidth".to_string(), s.to_string());
        }
        if let Some(ref s) = pixel_size {
            req = req.with_query_param("pixelSize".to_string(), s.to_string());
        }
        if let Some(ref s) = edges {
            req = req.with_query_param("edges".to_string(), s.to_string());
        }
        if let Some(ref s) = show_all_parts {
            req = req.with_query_param("showAllParts".to_string(), s.to_string());
        }
        if let Some(ref s) = include_surfaces {
            req = req.with_query_param("includeSurfaces".to_string(), s.to_string());
        }
        if let Some(ref s) = use_anti_aliasing {
            req = req.with_query_param("useAntiAliasing".to_string(), s.to_string());
        }
        if let Some(ref s) = display_state_id {
            req = req.with_query_param("displayStateId".to_string(), s.to_string());
        }
        if let Some(ref s) = configuration {
            req = req.with_query_param("configuration".to_string(), s.to_string());
        }
        if let Some(ref s) = exploded_view_id {
            req = req.with_query_param("explodedViewId".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wvm".to_string(), wvm.to_string());
        req = req.with_path_param("wvmid".to_string(), wvmid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_translator_formats(&self, did: &str, wid: &str, eid: &str, check_content: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/assemblies/d/{did}/w/{wid}/e/{eid}/translationformats".to_string())
        ;
        if let Some(ref s) = check_content {
            req = req.with_query_param("checkContent".to_string(), s.to_string());
        }
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn insert_transformed_instances(&self, did: &str, eid: &str, wid: &str, bt_assembly_transformed_instances_definition_params: crate::models::BtAssemblyTransformedInstancesDefinitionParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/assemblies/d/{did}/w/{wid}/e/{eid}/transformedinstances".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_body_param(bt_assembly_transformed_instances_definition_params);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn transform_occurrences(&self, did: &str, eid: &str, wid: &str, bt_assembly_transform_definition_params: crate::models::BtAssemblyTransformDefinitionParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/assemblies/d/{did}/w/{wid}/e/{eid}/occurrencetransforms".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_body_param(bt_assembly_transform_definition_params);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn translate_format(&self, did: &str, wv: &str, wvid: &str, eid: &str, bt_translate_format_params: crate::models::BtTranslateFormatParams) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/translations".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wv".to_string(), wv.to_string());
        req = req.with_path_param("wvid".to_string(), wvid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_body_param(bt_translate_format_params);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn update_feature(&self, did: &str, wid: &str, eid: &str, fid: &str, body: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/api/assemblies/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;
        req = req.with_path_param("did".to_string(), did.to_string());
        req = req.with_path_param("wid".to_string(), wid.to_string());
        req = req.with_path_param("eid".to_string(), eid.to_string());
        req = req.with_path_param("fid".to_string(), fid.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
